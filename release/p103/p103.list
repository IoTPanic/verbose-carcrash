
./release/p103/p103.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <isr_vectors>:
 8000000:	00 a0 00 20 bd 06 00 08 29 07 00 08 29 07 00 08     ... ....)...)...
 8000010:	29 07 00 08 29 07 00 08 29 07 00 08 00 00 00 00     )...)...).......
	...
 800002c:	29 07 00 08 00 00 00 00 00 00 00 00 89 01 00 08     )...............
 800003c:	79 06 00 08                                         y...

08000040 <delay>:
#define puts(x) do {                       \
                   stream_write(USART,x);  \
                }while(0)

static void delay(volatile int count)
{
 8000040:	b480      	push	{r7}
 8000042:	b083      	sub	sp, #12
 8000044:	af00      	add	r7, sp, #0
 8000046:	6078      	str	r0, [r7, #4]
	count *= 25000;
 8000048:	687b      	ldr	r3, [r7, #4]
 800004a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800004e:	fb02 f303 	mul.w	r3, r2, r3
 8000052:	607b      	str	r3, [r7, #4]
	while (count--) {
 8000054:	bf00      	nop
 8000056:	687b      	ldr	r3, [r7, #4]
 8000058:	1e5a      	subs	r2, r3, #1
 800005a:	607a      	str	r2, [r7, #4]
 800005c:	2b00      	cmp	r3, #0
 800005e:	d1fa      	bne.n	8000056 <delay+0x16>
	}
}
 8000060:	bf00      	nop
 8000062:	bf00      	nop
 8000064:	370c      	adds	r7, #12
 8000066:	46bd      	mov	sp, r7
 8000068:	bc80      	pop	{r7}
 800006a:	4770      	bx	lr

0800006c <busy_loop>:

static void busy_loop(void *str)
{
 800006c:	b580      	push	{r7, lr}
 800006e:	b082      	sub	sp, #8
 8000070:	af00      	add	r7, sp, #0
 8000072:	6078      	str	r0, [r7, #4]
	while (1) {
		puts(str);
 8000074:	6879      	ldr	r1, [r7, #4]
 8000076:	2000      	movs	r0, #0
 8000078:	f000 fa94 	bl	80005a4 <stream_write>
		puts(": Running...\r\n");
 800007c:	4904      	ldr	r1, [pc, #16]	; (8000090 <busy_loop+0x24>)
 800007e:	2000      	movs	r0, #0
 8000080:	f000 fa90 	bl	80005a4 <stream_write>
		delay(RECOMMAND_TIME_INTERVAL);
 8000084:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000088:	f7ff ffda 	bl	8000040 <delay>
		puts(str);
 800008c:	e7f2      	b.n	8000074 <busy_loop+0x8>
 800008e:	bf00      	nop
 8000090:	08000844 	.word	0x08000844

08000094 <test1>:
	}
}

void test1(void *userdata)
{
 8000094:	b580      	push	{r7, lr}
 8000096:	b082      	sub	sp, #8
 8000098:	af00      	add	r7, sp, #0
 800009a:	6078      	str	r0, [r7, #4]
	busy_loop(userdata);
 800009c:	6878      	ldr	r0, [r7, #4]
 800009e:	f7ff ffe5 	bl	800006c <busy_loop>
}
 80000a2:	bf00      	nop
 80000a4:	3708      	adds	r7, #8
 80000a6:	46bd      	mov	sp, r7
 80000a8:	bd80      	pop	{r7, pc}

080000aa <test2>:

void test2(void *userdata)
{
 80000aa:	b580      	push	{r7, lr}
 80000ac:	b082      	sub	sp, #8
 80000ae:	af00      	add	r7, sp, #0
 80000b0:	6078      	str	r0, [r7, #4]
	busy_loop(userdata);
 80000b2:	6878      	ldr	r0, [r7, #4]
 80000b4:	f7ff ffda 	bl	800006c <busy_loop>
}
 80000b8:	bf00      	nop
 80000ba:	3708      	adds	r7, #8
 80000bc:	46bd      	mov	sp, r7
 80000be:	bd80      	pop	{r7, pc}

080000c0 <test3>:

void test3(void *userdata)
{
 80000c0:	b580      	push	{r7, lr}
 80000c2:	b082      	sub	sp, #8
 80000c4:	af00      	add	r7, sp, #0
 80000c6:	6078      	str	r0, [r7, #4]
	puts("Task is currently running could I have a cup o' memory sia? ");
 80000c8:	4907      	ldr	r1, [pc, #28]	; (80000e8 <test3+0x28>)
 80000ca:	2000      	movs	r0, #0
 80000cc:	f000 fa6a 	bl	80005a4 <stream_write>
	puts(userdata);
 80000d0:	6879      	ldr	r1, [r7, #4]
 80000d2:	2000      	movs	r0, #0
 80000d4:	f000 fa66 	bl	80005a4 <stream_write>
	puts("\r\n");
 80000d8:	4904      	ldr	r1, [pc, #16]	; (80000ec <test3+0x2c>)
 80000da:	2000      	movs	r0, #0
 80000dc:	f000 fa62 	bl	80005a4 <stream_write>
}
 80000e0:	bf00      	nop
 80000e2:	3708      	adds	r7, #8
 80000e4:	46bd      	mov	sp, r7
 80000e6:	bd80      	pop	{r7, pc}
 80000e8:	08000854 	.word	0x08000854
 80000ec:	08000894 	.word	0x08000894

080000f0 <main>:

int main(void)
{
 80000f0:	b580      	push	{r7, lr}
 80000f2:	b084      	sub	sp, #16
 80000f4:	af00      	add	r7, sp, #0
	const char *str1 = "Task1", *str2 = "Task2", *str3 = "Task3";
 80000f6:	4b1b      	ldr	r3, [pc, #108]	; (8000164 <main+0x74>)
 80000f8:	60fb      	str	r3, [r7, #12]
 80000fa:	4b1b      	ldr	r3, [pc, #108]	; (8000168 <main+0x78>)
 80000fc:	60bb      	str	r3, [r7, #8]
 80000fe:	4b1b      	ldr	r3, [pc, #108]	; (800016c <main+0x7c>)
 8000100:	607b      	str	r3, [r7, #4]

	stream_init(USART);
 8000102:	2000      	movs	r0, #0
 8000104:	f000 fa3e 	bl	8000584 <stream_init>

	if (thread_create(test1, (void *) str1) == -1) {
 8000108:	68f9      	ldr	r1, [r7, #12]
 800010a:	4819      	ldr	r0, [pc, #100]	; (8000170 <main+0x80>)
 800010c:	f000 f8a4 	bl	8000258 <thread_create>
 8000110:	4603      	mov	r3, r0
 8000112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000116:	d103      	bne.n	8000120 <main+0x30>
		puts("Thread 1 creation failed\r\n");
 8000118:	4916      	ldr	r1, [pc, #88]	; (8000174 <main+0x84>)
 800011a:	2000      	movs	r0, #0
 800011c:	f000 fa42 	bl	80005a4 <stream_write>
	}

	if (thread_create(test2, (void *) str2) == -1) {
 8000120:	68b9      	ldr	r1, [r7, #8]
 8000122:	4815      	ldr	r0, [pc, #84]	; (8000178 <main+0x88>)
 8000124:	f000 f898 	bl	8000258 <thread_create>
 8000128:	4603      	mov	r3, r0
 800012a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800012e:	d103      	bne.n	8000138 <main+0x48>
		puts("Thread 2 creation failed\r\n");
 8000130:	4912      	ldr	r1, [pc, #72]	; (800017c <main+0x8c>)
 8000132:	2000      	movs	r0, #0
 8000134:	f000 fa36 	bl	80005a4 <stream_write>
	}

	if (thread_create(test3, (void *) str3) == -1) {
 8000138:	6879      	ldr	r1, [r7, #4]
 800013a:	4811      	ldr	r0, [pc, #68]	; (8000180 <main+0x90>)
 800013c:	f000 f88c 	bl	8000258 <thread_create>
 8000140:	4603      	mov	r3, r0
 8000142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000146:	d103      	bne.n	8000150 <main+0x60>
		puts("Thread 3 creation failed\r\n");
 8000148:	490e      	ldr	r1, [pc, #56]	; (8000184 <main+0x94>)
 800014a:	2000      	movs	r0, #0
 800014c:	f000 fa2a 	bl	80005a4 <stream_write>
	}

	SysTick_init();
 8000150:	f000 faa0 	bl	8000694 <SysTick_init>

	thread_start();
 8000154:	f000 f852 	bl	80001fc <thread_start>

	return 0;
 8000158:	2300      	movs	r3, #0
 800015a:	4618      	mov	r0, r3
 800015c:	3710      	adds	r7, #16
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
 8000162:	bf00      	nop
 8000164:	08000898 	.word	0x08000898
 8000168:	080008a0 	.word	0x080008a0
 800016c:	080008a8 	.word	0x080008a8
 8000170:	08000095 	.word	0x08000095
 8000174:	080008b0 	.word	0x080008b0
 8000178:	080000ab 	.word	0x080000ab
 800017c:	080008cc 	.word	0x080008cc
 8000180:	080000c1 	.word	0x080000c1
 8000184:	080008e8 	.word	0x080008e8

08000188 <pendsv_handler>:
 * wrong stack pointer. PendSV handles calling convention itself.
 */
void __attribute__((naked)) pendsv_handler()
{
	/* Save the old task's context[1] */
	asm volatile("mrs   r0, psp\n"
 8000188:	f3ef 8009 	mrs	r0, PSP
 800018c:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	             "stmdb r0!, {r4-r11, lr}\n");
	/* To save the last task's sp from r0 into its tcb*/
	asm volatile("mov   %0, r0\n" : "=r"(tasks[lastTask].stack));
 8000190:	4b18      	ldr	r3, [pc, #96]	; (80001f4 <pendsv_handler+0x6c>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4601      	mov	r1, r0
 8000196:	4818      	ldr	r0, [pc, #96]	; (80001f8 <pendsv_handler+0x70>)
 8000198:	4613      	mov	r3, r2
 800019a:	005b      	lsls	r3, r3, #1
 800019c:	4413      	add	r3, r2
 800019e:	009b      	lsls	r3, r3, #2
 80001a0:	4403      	add	r3, r0
 80001a2:	6019      	str	r1, [r3, #0]

	/* Find a new task to run */
	while (1) {
		lastTask++;
 80001a4:	4b13      	ldr	r3, [pc, #76]	; (80001f4 <pendsv_handler+0x6c>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	3301      	adds	r3, #1
 80001aa:	4a12      	ldr	r2, [pc, #72]	; (80001f4 <pendsv_handler+0x6c>)
 80001ac:	6013      	str	r3, [r2, #0]
		if (lastTask == MAX_TASKS)
 80001ae:	4b11      	ldr	r3, [pc, #68]	; (80001f4 <pendsv_handler+0x6c>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	2b0a      	cmp	r3, #10
 80001b4:	d102      	bne.n	80001bc <pendsv_handler+0x34>
			lastTask = 0;
 80001b6:	4b0f      	ldr	r3, [pc, #60]	; (80001f4 <pendsv_handler+0x6c>)
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]
		if (tasks[lastTask].in_use) {
 80001bc:	4b0d      	ldr	r3, [pc, #52]	; (80001f4 <pendsv_handler+0x6c>)
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	490d      	ldr	r1, [pc, #52]	; (80001f8 <pendsv_handler+0x70>)
 80001c2:	4613      	mov	r3, r2
 80001c4:	005b      	lsls	r3, r3, #1
 80001c6:	4413      	add	r3, r2
 80001c8:	009b      	lsls	r3, r3, #2
 80001ca:	440b      	add	r3, r1
 80001cc:	3308      	adds	r3, #8
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d0e7      	beq.n	80001a4 <pendsv_handler+0x1c>
			/* Move the task's stack pointer address into r0 */
			asm volatile("mov r0, %0\n" : : "r"(tasks[lastTask].stack));
 80001d4:	4b07      	ldr	r3, [pc, #28]	; (80001f4 <pendsv_handler+0x6c>)
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	4907      	ldr	r1, [pc, #28]	; (80001f8 <pendsv_handler+0x70>)
 80001da:	4613      	mov	r3, r2
 80001dc:	005b      	lsls	r3, r3, #1
 80001de:	4413      	add	r3, r2
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	440b      	add	r3, r1
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4618      	mov	r0, r3
			/* Restore the new task's context and jump to the task */
			asm volatile("ldmia r0!, {r4-r11, lr}\n"
 80001e8:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001ec:	f380 8809 	msr	PSP, r0
 80001f0:	4770      	bx	lr
		lastTask++;
 80001f2:	e7d7      	b.n	80001a4 <pendsv_handler+0x1c>
 80001f4:	2000007c 	.word	0x2000007c
 80001f8:	20000004 	.word	0x20000004

080001fc <thread_start>:
 * modifying register at prologue/epilogue sequences and
 * corrupts inline-assembly usage.
 */
void __attribute__((naked)) thread_start()
{
	lastTask = 0;
 80001fc:	4b14      	ldr	r3, [pc, #80]	; (8000250 <thread_start+0x54>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
	CONTROL_Type user_ctx = {
 8000202:	2400      	movs	r4, #0
 8000204:	4623      	mov	r3, r4
 8000206:	f043 0401 	orr.w	r4, r3, #1
 800020a:	4623      	mov	r3, r4
 800020c:	f043 0402 	orr.w	r4, r3, #2
	};

	/* Reset APSR before context switch
	 * Make sure we have a _clean_ PSR for the task.
	 */
	asm volatile("mov r0, #0\n"
 8000210:	f04f 0000 	mov.w	r0, #0
 8000214:	f380 8800 	msr	CPSR_f, r0
	             "msr APSR_nzcvq, r0\n");
	/* Load user task's context and jump to the task */
	__set_PSP((uint32_t) tasks[lastTask].stack);
 8000218:	4b0d      	ldr	r3, [pc, #52]	; (8000250 <thread_start+0x54>)
 800021a:	681a      	ldr	r2, [r3, #0]
 800021c:	490d      	ldr	r1, [pc, #52]	; (8000254 <thread_start+0x58>)
 800021e:	4613      	mov	r3, r2
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	4413      	add	r3, r2
 8000224:	009b      	lsls	r3, r3, #2
 8000226:	440b      	add	r3, r1
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	461d      	mov	r5, r3

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack));
 800022c:	f385 8809 	msr	PSP, r5
}
 8000230:	bf00      	nop
	__set_CONTROL(user_ctx.w);
 8000232:	4623      	mov	r3, r4
 8000234:	461c      	mov	r4, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000236:	f384 8814 	msr	CONTROL, r4
}
 800023a:	bf00      	nop
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 800023c:	f3bf 8f6f 	isb	sy
}
 8000240:	bf00      	nop
	 * psp ->  -------                              -------
	 *
	 * Instead of "pop {r0}", use "ldr r0, [sp]" to ensure consistent
	 * with the way how PendSV saves _old_ context[1].
	 */
	asm volatile("pop {r4-r11, lr}\n"
 8000242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000246:	9800      	ldr	r0, [sp, #0]
	             "ldr r0, [sp]\n");
	/* Okay, we are ready to run first task, get address from
	 * stack[15]. We just pop 9 register so #24 comes from
	 * (15 - 9) * sizeof(entry of sp) = 6 * 4.
	 */
	asm volatile("ldr pc, [sp, #24]\n");
 8000248:	f8dd f018 	ldr.w	pc, [sp, #24]

	/* Never reach here */
	while(1);
 800024c:	e7fe      	b.n	800024c <thread_start+0x50>
 800024e:	bf00      	nop
 8000250:	2000007c 	.word	0x2000007c
 8000254:	20000004 	.word	0x20000004

08000258 <thread_create>:

}

int thread_create(void (*run)(void *), void *userdata)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	6039      	str	r1, [r7, #0]
	/* Find a free thing */
	int threadId = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
	uint32_t *stack;

	for (threadId = 0; threadId < MAX_TASKS; threadId++) {
 8000266:	2300      	movs	r3, #0
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	e00d      	b.n	8000288 <thread_create+0x30>
		if (tasks[threadId].in_use == 0)
 800026c:	492f      	ldr	r1, [pc, #188]	; (800032c <thread_create+0xd4>)
 800026e:	68fa      	ldr	r2, [r7, #12]
 8000270:	4613      	mov	r3, r2
 8000272:	005b      	lsls	r3, r3, #1
 8000274:	4413      	add	r3, r2
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	440b      	add	r3, r1
 800027a:	3308      	adds	r3, #8
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d006      	beq.n	8000290 <thread_create+0x38>
	for (threadId = 0; threadId < MAX_TASKS; threadId++) {
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	3301      	adds	r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	2b09      	cmp	r3, #9
 800028c:	ddee      	ble.n	800026c <thread_create+0x14>
 800028e:	e000      	b.n	8000292 <thread_create+0x3a>
			break;
 8000290:	bf00      	nop
	}

	if (threadId == MAX_TASKS)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	2b0a      	cmp	r3, #10
 8000296:	d102      	bne.n	800029e <thread_create+0x46>
		return -1;
 8000298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800029c:	e042      	b.n	8000324 <thread_create+0xcc>

	/* Create the stack */
	stack = (uint32_t *) malloc(STACK_SIZE * sizeof(uint32_t));
 800029e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80002a2:	f000 f89f 	bl	80003e4 <malloc>
 80002a6:	60b8      	str	r0, [r7, #8]
	tasks[threadId].orig_stack = stack;
 80002a8:	4920      	ldr	r1, [pc, #128]	; (800032c <thread_create+0xd4>)
 80002aa:	68fa      	ldr	r2, [r7, #12]
 80002ac:	4613      	mov	r3, r2
 80002ae:	005b      	lsls	r3, r3, #1
 80002b0:	4413      	add	r3, r2
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	440b      	add	r3, r1
 80002b6:	3304      	adds	r3, #4
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	601a      	str	r2, [r3, #0]
	if (stack == 0)
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d102      	bne.n	80002c8 <thread_create+0x70>
		return -1;
 80002c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002c6:	e02d      	b.n	8000324 <thread_create+0xcc>

	stack += STACK_SIZE - 17; /* End of stack, minus what we are about to push */
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80002ce:	60bb      	str	r3, [r7, #8]
	stack[8] = (unsigned int) THREAD_PSP;
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	3320      	adds	r3, #32
 80002d4:	f06f 0202 	mvn.w	r2, #2
 80002d8:	601a      	str	r2, [r3, #0]
	stack[9] = (unsigned int) userdata;
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	3324      	adds	r3, #36	; 0x24
 80002de:	683a      	ldr	r2, [r7, #0]
 80002e0:	601a      	str	r2, [r3, #0]
	stack[14] = (unsigned) &thread_self_terminal;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	3338      	adds	r3, #56	; 0x38
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <thread_create+0xd8>)
 80002e8:	601a      	str	r2, [r3, #0]
	stack[15] = (unsigned int) run;
 80002ea:	68bb      	ldr	r3, [r7, #8]
 80002ec:	333c      	adds	r3, #60	; 0x3c
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	601a      	str	r2, [r3, #0]
	stack[16] = (unsigned int) 0x01000000; /* PSR Thumb bit */
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	3340      	adds	r3, #64	; 0x40
 80002f6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002fa:	601a      	str	r2, [r3, #0]

	/* Construct the control block */
	tasks[threadId].stack = stack;
 80002fc:	490b      	ldr	r1, [pc, #44]	; (800032c <thread_create+0xd4>)
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	4613      	mov	r3, r2
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	4413      	add	r3, r2
 8000306:	009b      	lsls	r3, r3, #2
 8000308:	440b      	add	r3, r1
 800030a:	68ba      	ldr	r2, [r7, #8]
 800030c:	601a      	str	r2, [r3, #0]
	tasks[threadId].in_use = 1;
 800030e:	4907      	ldr	r1, [pc, #28]	; (800032c <thread_create+0xd4>)
 8000310:	68fa      	ldr	r2, [r7, #12]
 8000312:	4613      	mov	r3, r2
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	4413      	add	r3, r2
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	440b      	add	r3, r1
 800031c:	3308      	adds	r3, #8
 800031e:	2201      	movs	r2, #1
 8000320:	701a      	strb	r2, [r3, #0]

	return threadId;
 8000322:	68fb      	ldr	r3, [r7, #12]
}
 8000324:	4618      	mov	r0, r3
 8000326:	3710      	adds	r7, #16
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000004 	.word	0x20000004
 8000330:	08000375 	.word	0x08000375

08000334 <thread_kill>:

void thread_kill(int thread_id)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	tasks[thread_id].in_use = 0;
 800033c:	490c      	ldr	r1, [pc, #48]	; (8000370 <thread_kill+0x3c>)
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	4613      	mov	r3, r2
 8000342:	005b      	lsls	r3, r3, #1
 8000344:	4413      	add	r3, r2
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	440b      	add	r3, r1
 800034a:	3308      	adds	r3, #8
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]

	/* Free the stack */
	free(tasks[thread_id].orig_stack);
 8000350:	4907      	ldr	r1, [pc, #28]	; (8000370 <thread_kill+0x3c>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	4613      	mov	r3, r2
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	4413      	add	r3, r2
 800035a:	009b      	lsls	r3, r3, #2
 800035c:	440b      	add	r3, r1
 800035e:	3304      	adds	r3, #4
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f8ac 	bl	80004c0 <free>
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000004 	.word	0x20000004

08000374 <thread_self_terminal>:

void thread_self_terminal()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000378:	b672      	cpsid	i
}
 800037a:	bf00      	nop
	/* This will kill the stack.
	 * For now, disable context switches to save ourselves.
	 */
	__disable_irq();
	thread_kill(lastTask);
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <thread_self_terminal+0x18>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ffd7 	bl	8000334 <thread_kill>
  __ASM volatile ("cpsie i" : : : "memory");
 8000386:	b662      	cpsie	i
}
 8000388:	bf00      	nop
	__enable_irq();

	/* And now wait for death to kick in */
	while (1);
 800038a:	e7fe      	b.n	800038a <thread_self_terminal+0x16>
 800038c:	2000007c 	.word	0x2000007c

08000390 <sbrk>:

static Header base; /* empty list to get started */
static Header *freep = NULL; /* start of free list */

static void *sbrk(unsigned int nbytes)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	if (program_break + nbytes >= heaps
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <sbrk+0x48>)
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4413      	add	r3, r2
 80003a0:	4a0e      	ldr	r2, [pc, #56]	; (80003dc <sbrk+0x4c>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d311      	bcc.n	80003ca <sbrk+0x3a>
	    && program_break + nbytes < heaps + MAX_HEAPS) {
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <sbrk+0x48>)
 80003a8:	681a      	ldr	r2, [r3, #0]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4413      	add	r3, r2
 80003ae:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <sbrk+0x50>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d20a      	bcs.n	80003ca <sbrk+0x3a>
		unsigned char *previous_pb = program_break;
 80003b4:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <sbrk+0x48>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	60fb      	str	r3, [r7, #12]
		program_break += nbytes;
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <sbrk+0x48>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4413      	add	r3, r2
 80003c2:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <sbrk+0x48>)
 80003c4:	6013      	str	r3, [r2, #0]
		return (void *) previous_pb;
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	e001      	b.n	80003ce <sbrk+0x3e>
	}
	return (void *) -1;
 80003ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003ce:	4618      	mov	r0, r3
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	20000000 	.word	0x20000000
 80003dc:	20000080 	.word	0x20000080
 80003e0:	20001080 	.word	0x20001080

080003e4 <malloc>:

void *malloc(unsigned int nbytes)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b086      	sub	sp, #24
 80003e8:	af00      	add	r7, sp, #0
 80003ea:	6078      	str	r0, [r7, #4]
	Header *p, *prevp;
	unsigned int nunits;
	void *cp;

	nunits = (nbytes + sizeof(Header) - 1) / sizeof(Header) + 1;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	3307      	adds	r3, #7
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]

	if ((prevp = freep) == NULL) {
 80003f6:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <malloc+0xd4>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d10b      	bne.n	800041a <malloc+0x36>
		base.s.ptr = freep = prevp = &base;
 8000402:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <malloc+0xd8>)
 8000404:	613b      	str	r3, [r7, #16]
 8000406:	4a2c      	ldr	r2, [pc, #176]	; (80004b8 <malloc+0xd4>)
 8000408:	693b      	ldr	r3, [r7, #16]
 800040a:	6013      	str	r3, [r2, #0]
 800040c:	4b2a      	ldr	r3, [pc, #168]	; (80004b8 <malloc+0xd4>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a2a      	ldr	r2, [pc, #168]	; (80004bc <malloc+0xd8>)
 8000412:	6013      	str	r3, [r2, #0]
		base.s.size = 0;
 8000414:	4b29      	ldr	r3, [pc, #164]	; (80004bc <malloc+0xd8>)
 8000416:	2200      	movs	r2, #0
 8000418:	605a      	str	r2, [r3, #4]
	}

	for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr) {
 800041a:	693b      	ldr	r3, [r7, #16]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	617b      	str	r3, [r7, #20]
		if (p->s.size >= nunits) {
 8000420:	697b      	ldr	r3, [r7, #20]
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	68fa      	ldr	r2, [r7, #12]
 8000426:	429a      	cmp	r2, r3
 8000428:	d81e      	bhi.n	8000468 <malloc+0x84>
			if (p->s.size == nunits) {
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	68fa      	ldr	r2, [r7, #12]
 8000430:	429a      	cmp	r2, r3
 8000432:	d104      	bne.n	800043e <malloc+0x5a>
				prevp->s.ptr = p->s.ptr;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	e00e      	b.n	800045c <malloc+0x78>
			} else {
				p->s.size -= nunits;
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	1ad2      	subs	r2, r2, r3
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	605a      	str	r2, [r3, #4]
				p += p->s.size;
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	697a      	ldr	r2, [r7, #20]
 8000452:	4413      	add	r3, r2
 8000454:	617b      	str	r3, [r7, #20]
				p->s.size = nunits;
 8000456:	697b      	ldr	r3, [r7, #20]
 8000458:	68fa      	ldr	r2, [r7, #12]
 800045a:	605a      	str	r2, [r3, #4]
			}
			freep = prevp;
 800045c:	4a16      	ldr	r2, [pc, #88]	; (80004b8 <malloc+0xd4>)
 800045e:	693b      	ldr	r3, [r7, #16]
 8000460:	6013      	str	r3, [r2, #0]
			return (void *)(p + 1);
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3308      	adds	r3, #8
 8000466:	e023      	b.n	80004b0 <malloc+0xcc>
		}

		if (p == freep) {
 8000468:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <malloc+0xd4>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	429a      	cmp	r2, r3
 8000470:	d118      	bne.n	80004a4 <malloc+0xc0>
			cp = sbrk(nunits * sizeof(Header));
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff8a 	bl	8000390 <sbrk>
 800047c:	60b8      	str	r0, [r7, #8]
			if (cp == (void *) - 1) {
 800047e:	68bb      	ldr	r3, [r7, #8]
 8000480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000484:	d101      	bne.n	800048a <malloc+0xa6>
				return NULL;
 8000486:	2300      	movs	r3, #0
 8000488:	e012      	b.n	80004b0 <malloc+0xcc>
			} else {
				p = (Header *) cp;
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	617b      	str	r3, [r7, #20]
				p->s.size = nunits;
 800048e:	697b      	ldr	r3, [r7, #20]
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	605a      	str	r2, [r3, #4]
				free((void *)(p + 1));
 8000494:	697b      	ldr	r3, [r7, #20]
 8000496:	3308      	adds	r3, #8
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f811 	bl	80004c0 <free>
				p = freep;
 800049e:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <malloc+0xd4>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	617b      	str	r3, [r7, #20]
	for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr) {
 80004a4:	697b      	ldr	r3, [r7, #20]
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	617b      	str	r3, [r7, #20]
		if (p->s.size >= nunits) {
 80004ae:	e7b7      	b.n	8000420 <malloc+0x3c>
			}
		}
	}
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	3718      	adds	r7, #24
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20001088 	.word	0x20001088
 80004bc:	20001080 	.word	0x20001080

080004c0 <free>:

void free(void *ap)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	Header *bp, *p;
	bp = (Header *) ap - 1;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	3b08      	subs	r3, #8
 80004cc:	60bb      	str	r3, [r7, #8]

	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr) {
 80004ce:	4b2c      	ldr	r3, [pc, #176]	; (8000580 <free+0xc0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	e010      	b.n	80004f8 <free+0x38>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	68fa      	ldr	r2, [r7, #12]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d308      	bcc.n	80004f2 <free+0x32>
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d810      	bhi.n	800050a <free+0x4a>
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	68ba      	ldr	r2, [r7, #8]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d30b      	bcc.n	800050a <free+0x4a>
	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr) {
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68ba      	ldr	r2, [r7, #8]
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d9ea      	bls.n	80004d6 <free+0x16>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	429a      	cmp	r2, r3
 8000508:	d2e5      	bcs.n	80004d6 <free+0x16>
			break;
	}

	if (bp + bp->s.size == p->s.ptr) {
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	68ba      	ldr	r2, [r7, #8]
 8000512:	441a      	add	r2, r3
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	429a      	cmp	r2, r3
 800051a:	d10d      	bne.n	8000538 <free+0x78>
		bp->s.size += p->s.ptr->s.size;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	685a      	ldr	r2, [r3, #4]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	441a      	add	r2, r3
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	605a      	str	r2, [r3, #4]
		bp->s.ptr = p->s.ptr->s.ptr;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	e003      	b.n	8000540 <free+0x80>
	} else {
		bp->s.ptr = p->s.ptr;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	601a      	str	r2, [r3, #0]
	}

	if (p + p->s.size == bp) {
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	00db      	lsls	r3, r3, #3
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	4413      	add	r3, r2
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	429a      	cmp	r2, r3
 800054e:	d10b      	bne.n	8000568 <free+0xa8>
		p->s.size += bp->s.size;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	685a      	ldr	r2, [r3, #4]
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	441a      	add	r2, r3
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	605a      	str	r2, [r3, #4]
		p->s.ptr = bp->s.ptr;
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	e002      	b.n	800056e <free+0xae>
	} else {
		p->s.ptr = bp;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	601a      	str	r2, [r3, #0]
	}

	freep = p;
 800056e:	4a04      	ldr	r2, [pc, #16]	; (8000580 <free+0xc0>)
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	20001088 	.word	0x20001088

08000584 <stream_init>:
#include "stream.h"
#include "uart.h"

void stream_init(STREAM stream_type)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	switch (stream_type) {
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d102      	bne.n	800059a <stream_init+0x16>
	case USART:
		uart_init();
 8000594:	f000 f818 	bl	80005c8 <uart_init>
		break;
 8000598:	e000      	b.n	800059c <stream_init+0x18>
	default:
		break;
 800059a:	bf00      	nop
	}
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <stream_write>:


void stream_write(STREAM stream_type, const char *data)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	6039      	str	r1, [r7, #0]
 80005ae:	71fb      	strb	r3, [r7, #7]
	switch (stream_type) {
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <stream_write+0x1a>
	case USART:
		uart_write(data);
 80005b6:	6838      	ldr	r0, [r7, #0]
 80005b8:	f000 f83e 	bl	8000638 <uart_write>
		break;
 80005bc:	e000      	b.n	80005c0 <stream_write+0x1c>
	default:
		break;
 80005be:	bf00      	nop
	}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <uart_init>:
#include "uart.h"
#include "reg.h"

void uart_init(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (uint32_t)(0x00000001 | 0x00000004);
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <uart_init+0x64>)
 80005ce:	699b      	ldr	r3, [r3, #24]
 80005d0:	4a16      	ldr	r2, [pc, #88]	; (800062c <uart_init+0x64>)
 80005d2:	f043 0305 	orr.w	r3, r3, #5
 80005d6:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= (uint32_t)(0x00020000);
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <uart_init+0x64>)
 80005da:	69db      	ldr	r3, [r3, #28]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <uart_init+0x64>)
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e2:	61d3      	str	r3, [r2, #28]

	/* USART2 Configuration, Rx->PA3, Tx->PA2 */
	GPIOA->CRL = 0x00004B00;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <uart_init+0x68>)
 80005e6:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80005ea:	601a      	str	r2, [r3, #0]
	GPIOA->CRH = 0x44444444;
 80005ec:	4b10      	ldr	r3, [pc, #64]	; (8000630 <uart_init+0x68>)
 80005ee:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 80005f2:	605a      	str	r2, [r3, #4]
	GPIOA->ODR = 0x00000000;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <uart_init+0x68>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
	GPIOA->BSRR = 0x00000000;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	; (8000630 <uart_init+0x68>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
	GPIOA->BRR = 0x00000000;
 8000600:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <uart_init+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]

	USART2->CR1 = 0x0000000C;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <uart_init+0x6c>)
 8000608:	220c      	movs	r2, #12
 800060a:	60da      	str	r2, [r3, #12]
	USART2->CR2 = 0x00000000;
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <uart_init+0x6c>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
	USART2->CR3 = 0x00000000;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <uart_init+0x6c>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
	USART2->CR1 |= 0x2000;
 8000618:	4b06      	ldr	r3, [pc, #24]	; (8000634 <uart_init+0x6c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a05      	ldr	r2, [pc, #20]	; (8000634 <uart_init+0x6c>)
 800061e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000622:	60d3      	str	r3, [r2, #12]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	40004400 	.word	0x40004400

08000638 <uart_write>:

void uart_write(const char *str)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000640:	e00d      	b.n	800065e <uart_write+0x26>
		while (!(USART2->SR & USART_SR_TXE));
 8000642:	bf00      	nop
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <uart_write+0x3c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f9      	beq.n	8000644 <uart_write+0xc>
		USART2->DR = (*str & 0xFF);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <uart_write+0x3c>)
 8000656:	605a      	str	r2, [r3, #4]
		str++;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
	while (*str) {
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ed      	bne.n	8000642 <uart_write+0xa>
	}
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40004400 	.word	0x40004400

08000678 <systick_handler>:
#include "reg.h"
#include "systick.h"

void systick_handler()
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET;
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <systick_handler+0x18>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <systick_handler+0x18>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000686:	6053      	str	r3, [r2, #4]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <SysTick_init>:

void SysTick_init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
	/* SysTick configuration */
	SysTick->LOAD = (CPU_CLOCK_HZ / TICK_RATE_HZ) - 1UL;
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <SysTick_init+0x20>)
 800069a:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <SysTick_init+0x24>)
 800069c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SysTick_init+0x20>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x07;
 80006a4:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <SysTick_init+0x20>)
 80006a6:	2207      	movs	r2, #7
 80006a8:	601a      	str	r2, [r3, #0]
}
 80006aa:	bf00      	nop
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000e010 	.word	0xe000e010
 80006b8:	006ddcff 	.word	0x006ddcff

080006bc <reset_handler>:
extern uint32_t _estack;

void rcc_clock_init(void);

void reset_handler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
	/* Copy the data segment initializers from flash to SRAM */
	uint32_t *idata_begin = &_sidata;
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <reset_handler+0x58>)
 80006c4:	617b      	str	r3, [r7, #20]
	uint32_t *data_begin = &_sdata;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <reset_handler+0x5c>)
 80006c8:	613b      	str	r3, [r7, #16]
	uint32_t *data_end = &_edata;
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <reset_handler+0x60>)
 80006cc:	60bb      	str	r3, [r7, #8]
	while (data_begin < data_end) *data_begin++ = *idata_begin++;
 80006ce:	e007      	b.n	80006e0 <reset_handler+0x24>
 80006d0:	697a      	ldr	r2, [r7, #20]
 80006d2:	1d13      	adds	r3, r2, #4
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	1d19      	adds	r1, r3, #4
 80006da:	6139      	str	r1, [r7, #16]
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d3f3      	bcc.n	80006d0 <reset_handler+0x14>

	/* Zero fill the bss segment. */
	uint32_t *bss_begin = &_sbss;
 80006e8:	4b0d      	ldr	r3, [pc, #52]	; (8000720 <reset_handler+0x64>)
 80006ea:	60fb      	str	r3, [r7, #12]
	uint32_t *bss_end = &_ebss;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <reset_handler+0x68>)
 80006ee:	607b      	str	r3, [r7, #4]
	while (bss_begin < bss_end) *bss_begin++ = 0;
 80006f0:	e004      	b.n	80006fc <reset_handler+0x40>
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	1d1a      	adds	r2, r3, #4
 80006f6:	60fa      	str	r2, [r7, #12]
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	68fa      	ldr	r2, [r7, #12]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	429a      	cmp	r2, r3
 8000702:	d3f6      	bcc.n	80006f2 <reset_handler+0x36>

	/* Clock system intitialization */
	rcc_clock_init();
 8000704:	f000 f813 	bl	800072e <rcc_clock_init>

	main();
 8000708:	f7ff fcf2 	bl	80000f0 <main>
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08000903 	.word	0x08000903
 8000718:	20000000 	.word	0x20000000
 800071c:	20000004 	.word	0x20000004
 8000720:	20000004 	.word	0x20000004
 8000724:	2000108c 	.word	0x2000108c

08000728 <default_handler>:

void default_handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
	while (1);
 800072c:	e7fe      	b.n	800072c <default_handler+0x4>

0800072e <rcc_clock_init>:
	[0x0E] = (uint32_t *) pendsv_handler,		/* pendsv handler */
	[0x0F] = (uint32_t *) systick_handler		/* systick handler */
};

void rcc_clock_init(void)
{
 800072e:	b480      	push	{r7}
 8000730:	b083      	sub	sp, #12
 8000732:	af00      	add	r7, sp, #0
	/* Reset the RCC clock configuration to the default reset state(for debug purpose) */
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8000734:	4b40      	ldr	r3, [pc, #256]	; (8000838 <rcc_clock_init+0x10a>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a3f      	ldr	r2, [pc, #252]	; (8000838 <rcc_clock_init+0x10a>)
 800073a:	f043 0301 	orr.w	r3, r3, #1
 800073e:	6013      	str	r3, [r2, #0]

	/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
	RCC->CFGR &= (uint32_t) 0xF8FF0000;
 8000740:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <rcc_clock_init+0x10a>)
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	493c      	ldr	r1, [pc, #240]	; (8000838 <rcc_clock_init+0x10a>)
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <rcc_clock_init+0x10e>)
 8000748:	4013      	ands	r3, r2
 800074a:	604b      	str	r3, [r1, #4]

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800074c:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <rcc_clock_init+0x10a>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a39      	ldr	r2, [pc, #228]	; (8000838 <rcc_clock_init+0x10a>)
 8000752:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800075a:	6013      	str	r3, [r2, #0]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 800075c:	4b36      	ldr	r3, [pc, #216]	; (8000838 <rcc_clock_init+0x10a>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a35      	ldr	r2, [pc, #212]	; (8000838 <rcc_clock_init+0x10a>)
 8000762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000766:	6013      	str	r3, [r2, #0]

	/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
	RCC->CFGR &= (uint32_t) 0xFF80FFFF;
 8000768:	4b33      	ldr	r3, [pc, #204]	; (8000838 <rcc_clock_init+0x10a>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	4a32      	ldr	r2, [pc, #200]	; (8000838 <rcc_clock_init+0x10a>)
 800076e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000772:	6053      	str	r3, [r2, #4]

	/* Disable all interrupts and clear pending bits  */
	RCC->CIR = 0x009F0000;
 8000774:	4b30      	ldr	r3, [pc, #192]	; (8000838 <rcc_clock_init+0x10a>)
 8000776:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800077a:	609a      	str	r2, [r3, #8]

	/* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
	/* Configure the Flash Latency cycles and enable prefetch buffer */
	volatile uint32_t StartUpCounter = 0, HSEStatus = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	2300      	movs	r3, #0
 8000782:	603b      	str	r3, [r7, #0]

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	/* Enable HSE */
	RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <rcc_clock_init+0x10a>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a2b      	ldr	r2, [pc, #172]	; (8000838 <rcc_clock_init+0x10a>)
 800078a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800078e:	6013      	str	r3, [r2, #0]

	/* Wait till HSE is ready and if Time out is reached exit */
	do {
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <rcc_clock_init+0x10a>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000798:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	3301      	adds	r3, #1
 800079e:	607b      	str	r3, [r7, #4]
	} while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d103      	bne.n	80007ae <rcc_clock_init+0x80>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80007ac:	d1f0      	bne.n	8000790 <rcc_clock_init+0x62>

	if ((RCC->CR & RCC_CR_HSERDY) != 0)
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <rcc_clock_init+0x10a>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <rcc_clock_init+0x92>
		HSEStatus = (uint32_t) 0x01;
 80007ba:	2301      	movs	r3, #1
 80007bc:	603b      	str	r3, [r7, #0]
 80007be:	e001      	b.n	80007c4 <rcc_clock_init+0x96>
	else
		HSEStatus = (uint32_t) 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	603b      	str	r3, [r7, #0]

	if (HSEStatus == (uint32_t) 0x01) {
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d130      	bne.n	800082c <rcc_clock_init+0xfe>
		/* Enable Prefetch Buffer */
		FLASH->ACR |= FLASH_ACR_PRFTBE;
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <rcc_clock_init+0x112>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <rcc_clock_init+0x112>)
 80007d0:	f043 0310 	orr.w	r3, r3, #16
 80007d4:	6013      	str	r3, [r2, #0]

		/* Flash 0 wait state */
		FLASH->ACR &= (uint32_t)((uint32_t) ~FLASH_ACR_LATENCY);
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <rcc_clock_init+0x112>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <rcc_clock_init+0x112>)
 80007dc:	f023 0307 	bic.w	r3, r3, #7
 80007e0:	6013      	str	r3, [r2, #0]

		FLASH->ACR |= (uint32_t) FLASH_ACR_LATENCY_0;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <rcc_clock_init+0x112>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <rcc_clock_init+0x112>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6013      	str	r3, [r2, #0]

		/* HCLK = SYSCLK */
		RCC->CFGR |= (uint32_t) RCC_CFGR_HPRE_DIV1;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <rcc_clock_init+0x10a>)
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <rcc_clock_init+0x10a>)
 80007f2:	685b      	ldr	r3, [r3, #4]
 80007f4:	6053      	str	r3, [r2, #4]

		/* PCLK2 = HCLK */
		RCC->CFGR |= (uint32_t) RCC_CFGR_PPRE2_DIV1;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <rcc_clock_init+0x10a>)
 80007f8:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <rcc_clock_init+0x10a>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	6053      	str	r3, [r2, #4]

		/* PCLK1 = HCLK */
		RCC->CFGR |= (uint32_t) RCC_CFGR_PPRE1_DIV1;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <rcc_clock_init+0x10a>)
 8000800:	4a0d      	ldr	r2, [pc, #52]	; (8000838 <rcc_clock_init+0x10a>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	6053      	str	r3, [r2, #4]

		/* Select HSE as system clock source */
		RCC->CFGR &= (uint32_t)((uint32_t) ~(RCC_CFGR_SW));
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <rcc_clock_init+0x10a>)
 8000808:	685b      	ldr	r3, [r3, #4]
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <rcc_clock_init+0x10a>)
 800080c:	f023 0303 	bic.w	r3, r3, #3
 8000810:	6053      	str	r3, [r2, #4]
		RCC->CFGR |= (uint32_t) RCC_CFGR_SW_HSE;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <rcc_clock_init+0x10a>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <rcc_clock_init+0x10a>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6053      	str	r3, [r2, #4]

		/* Wait till HSE is used as system clock source */
		while ((RCC->CFGR & (uint32_t) RCC_CFGR_SWS) != (uint32_t) 0x04);
 800081e:	bf00      	nop
 8000820:	4b05      	ldr	r3, [pc, #20]	; (8000838 <rcc_clock_init+0x10a>)
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	f003 030c 	and.w	r3, r3, #12
 8000828:	2b04      	cmp	r3, #4
 800082a:	d1f9      	bne.n	8000820 <rcc_clock_init+0xf2>
	} else {
		/* If HSE fails to start-up, the application will have wrong clock
		configuration. User can add here some code to deal with this error */
	}
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	f8ff0000 	.word	0xf8ff0000
 8000840:	40022000 	.word	0x40022000
 8000844:	7552203a 	.word	0x7552203a
 8000848:	6e696e6e 	.word	0x6e696e6e
 800084c:	2e2e2e67 	.word	0x2e2e2e67
 8000850:	00000a0d 	.word	0x00000a0d
 8000854:	6b736154 	.word	0x6b736154
 8000858:	20736920 	.word	0x20736920
 800085c:	72727563 	.word	0x72727563
 8000860:	6c746e65 	.word	0x6c746e65
 8000864:	75722079 	.word	0x75722079
 8000868:	6e696e6e 	.word	0x6e696e6e
 800086c:	6f632067 	.word	0x6f632067
 8000870:	20646c75 	.word	0x20646c75
 8000874:	61682049 	.word	0x61682049
 8000878:	61206576 	.word	0x61206576
 800087c:	70756320 	.word	0x70756320
 8000880:	20276f20 	.word	0x20276f20
 8000884:	6f6d656d 	.word	0x6f6d656d
 8000888:	73207972 	.word	0x73207972
 800088c:	203f6169 	.word	0x203f6169
 8000890:	00000000 	.word	0x00000000
 8000894:	00000a0d 	.word	0x00000a0d
 8000898:	6b736154 	.word	0x6b736154
 800089c:	00000031 	.word	0x00000031
 80008a0:	6b736154 	.word	0x6b736154
 80008a4:	00000032 	.word	0x00000032
 80008a8:	6b736154 	.word	0x6b736154
 80008ac:	00000033 	.word	0x00000033
 80008b0:	65726854 	.word	0x65726854
 80008b4:	31206461 	.word	0x31206461
 80008b8:	65726320 	.word	0x65726320
 80008bc:	6f697461 	.word	0x6f697461
 80008c0:	6166206e 	.word	0x6166206e
 80008c4:	64656c69 	.word	0x64656c69
 80008c8:	00000a0d 	.word	0x00000a0d
 80008cc:	65726854 	.word	0x65726854
 80008d0:	32206461 	.word	0x32206461
 80008d4:	65726320 	.word	0x65726320
 80008d8:	6f697461 	.word	0x6f697461
 80008dc:	6166206e 	.word	0x6166206e
 80008e0:	64656c69 	.word	0x64656c69
 80008e4:	00000a0d 	.word	0x00000a0d
 80008e8:	65726854 	.word	0x65726854
 80008ec:	33206461 	.word	0x33206461
 80008f0:	65726320 	.word	0x65726320
 80008f4:	6f697461 	.word	0x6f697461
 80008f8:	6166206e 	.word	0x6166206e
 80008fc:	64656c69 	.word	0x64656c69
 8000900:	0a0d      	.short	0x0a0d
	...
