
./release/f429disco/f429disco.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <isr_vectors>:
 8000000:	00 00 03 20 c1 0a 00 08 2d 0b 00 08 2d 0b 00 08     ... ....-...-...
 8000010:	2d 0b 00 08 2d 0b 00 08 2d 0b 00 08 00 00 00 00     -...-...-.......
	...
 800002c:	2d 0b 00 08 00 00 00 00 00 00 00 00 69 01 00 08     -...........i...
 800003c:	7d 0a 00 08                                         }...

08000040 <delay>:
#define puts(x) do {                       \
                   stream_write(USART,x);  \
                }while(0)

static void delay(volatile int count)
{
 8000040:	b480      	push	{r7}
 8000042:	b083      	sub	sp, #12
 8000044:	af00      	add	r7, sp, #0
 8000046:	6078      	str	r0, [r7, #4]
	count *= 25000;
 8000048:	687b      	ldr	r3, [r7, #4]
 800004a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800004e:	fb02 f303 	mul.w	r3, r2, r3
 8000052:	607b      	str	r3, [r7, #4]
	while (count--) {
 8000054:	bf00      	nop
 8000056:	687b      	ldr	r3, [r7, #4]
 8000058:	1e5a      	subs	r2, r3, #1
 800005a:	607a      	str	r2, [r7, #4]
 800005c:	2b00      	cmp	r3, #0
 800005e:	d1fa      	bne.n	8000056 <delay+0x16>
	}
}
 8000060:	bf00      	nop
 8000062:	bf00      	nop
 8000064:	370c      	adds	r7, #12
 8000066:	46bd      	mov	sp, r7
 8000068:	bc80      	pop	{r7}
 800006a:	4770      	bx	lr

0800006c <busy_loop>:

static void busy_loop(void *str)
{
 800006c:	b580      	push	{r7, lr}
 800006e:	b082      	sub	sp, #8
 8000070:	af00      	add	r7, sp, #0
 8000072:	6078      	str	r0, [r7, #4]
	while (1) {
		puts(str);
 8000074:	6879      	ldr	r1, [r7, #4]
 8000076:	2000      	movs	r0, #0
 8000078:	f000 fa84 	bl	8000584 <stream_write>
		puts(": Running...\r\n");
 800007c:	4903      	ldr	r1, [pc, #12]	; (800008c <busy_loop+0x20>)
 800007e:	2000      	movs	r0, #0
 8000080:	f000 fa80 	bl	8000584 <stream_write>
		delay(RECOMMAND_TIME_INTERVAL);
 8000084:	2005      	movs	r0, #5
 8000086:	f7ff ffdb 	bl	8000040 <delay>
		puts(str);
 800008a:	e7f3      	b.n	8000074 <busy_loop+0x8>
 800008c:	08000bf8 	.word	0x08000bf8

08000090 <test1>:
	}
}

void test1(void *userdata)
{
 8000090:	b580      	push	{r7, lr}
 8000092:	b082      	sub	sp, #8
 8000094:	af00      	add	r7, sp, #0
 8000096:	6078      	str	r0, [r7, #4]
	busy_loop(userdata);
 8000098:	6878      	ldr	r0, [r7, #4]
 800009a:	f7ff ffe7 	bl	800006c <busy_loop>
}
 800009e:	bf00      	nop
 80000a0:	3708      	adds	r7, #8
 80000a2:	46bd      	mov	sp, r7
 80000a4:	bd80      	pop	{r7, pc}

080000a6 <test2>:

void test2(void *userdata)
{
 80000a6:	b580      	push	{r7, lr}
 80000a8:	b082      	sub	sp, #8
 80000aa:	af00      	add	r7, sp, #0
 80000ac:	6078      	str	r0, [r7, #4]
	busy_loop(userdata);
 80000ae:	6878      	ldr	r0, [r7, #4]
 80000b0:	f7ff ffdc 	bl	800006c <busy_loop>
}
 80000b4:	bf00      	nop
 80000b6:	3708      	adds	r7, #8
 80000b8:	46bd      	mov	sp, r7
 80000ba:	bd80      	pop	{r7, pc}

080000bc <test3>:

void test3(void *userdata)
{
 80000bc:	b580      	push	{r7, lr}
 80000be:	b082      	sub	sp, #8
 80000c0:	af00      	add	r7, sp, #0
 80000c2:	6078      	str	r0, [r7, #4]
	busy_loop(userdata);
 80000c4:	6878      	ldr	r0, [r7, #4]
 80000c6:	f7ff ffd1 	bl	800006c <busy_loop>
}
 80000ca:	bf00      	nop
 80000cc:	3708      	adds	r7, #8
 80000ce:	46bd      	mov	sp, r7
 80000d0:	bd80      	pop	{r7, pc}

080000d2 <main>:

int main(void)
{
 80000d2:	b580      	push	{r7, lr}
 80000d4:	b084      	sub	sp, #16
 80000d6:	af00      	add	r7, sp, #0
	const char *str1 = "Task1", *str2 = "Task2", *str3 = "Task3";
 80000d8:	4b1a      	ldr	r3, [pc, #104]	; (8000144 <main+0x72>)
 80000da:	60fb      	str	r3, [r7, #12]
 80000dc:	4b1a      	ldr	r3, [pc, #104]	; (8000148 <main+0x76>)
 80000de:	60bb      	str	r3, [r7, #8]
 80000e0:	4b1a      	ldr	r3, [pc, #104]	; (800014c <main+0x7a>)
 80000e2:	607b      	str	r3, [r7, #4]

	stream_init(USART);
 80000e4:	2000      	movs	r0, #0
 80000e6:	f000 fa3d 	bl	8000564 <stream_init>

	if (thread_create(test1, (void *) str1) == -1) {
 80000ea:	68f9      	ldr	r1, [r7, #12]
 80000ec:	4818      	ldr	r0, [pc, #96]	; (8000150 <main+0x7e>)
 80000ee:	f000 f8a3 	bl	8000238 <thread_create>
 80000f2:	4603      	mov	r3, r0
 80000f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80000f8:	d103      	bne.n	8000102 <main+0x30>
		puts("Thread 1 creation failed\r\n");
 80000fa:	4916      	ldr	r1, [pc, #88]	; (8000154 <main+0x82>)
 80000fc:	2000      	movs	r0, #0
 80000fe:	f000 fa41 	bl	8000584 <stream_write>
	}

	if (thread_create(test2, (void *) str2) == -1) {
 8000102:	68b9      	ldr	r1, [r7, #8]
 8000104:	4814      	ldr	r0, [pc, #80]	; (8000158 <main+0x86>)
 8000106:	f000 f897 	bl	8000238 <thread_create>
 800010a:	4603      	mov	r3, r0
 800010c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000110:	d103      	bne.n	800011a <main+0x48>
		puts("Thread 2 creation failed\r\n");
 8000112:	4912      	ldr	r1, [pc, #72]	; (800015c <main+0x8a>)
 8000114:	2000      	movs	r0, #0
 8000116:	f000 fa35 	bl	8000584 <stream_write>
	}

	if (thread_create(test3, (void *) str3) == -1) {
 800011a:	6879      	ldr	r1, [r7, #4]
 800011c:	4810      	ldr	r0, [pc, #64]	; (8000160 <main+0x8e>)
 800011e:	f000 f88b 	bl	8000238 <thread_create>
 8000122:	4603      	mov	r3, r0
 8000124:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000128:	d103      	bne.n	8000132 <main+0x60>
		puts("Thread 3 creation failed\r\n");
 800012a:	490e      	ldr	r1, [pc, #56]	; (8000164 <main+0x92>)
 800012c:	2000      	movs	r0, #0
 800012e:	f000 fa29 	bl	8000584 <stream_write>
	}

	SysTick_init();
 8000132:	f000 fcb1 	bl	8000a98 <SysTick_init>

	thread_start();
 8000136:	f000 f851 	bl	80001dc <thread_start>

	return 0;
 800013a:	2300      	movs	r3, #0
 800013c:	4618      	mov	r0, r3
 800013e:	3710      	adds	r7, #16
 8000140:	46bd      	mov	sp, r7
 8000142:	bd80      	pop	{r7, pc}
 8000144:	08000c08 	.word	0x08000c08
 8000148:	08000c10 	.word	0x08000c10
 800014c:	08000c18 	.word	0x08000c18
 8000150:	08000091 	.word	0x08000091
 8000154:	08000c20 	.word	0x08000c20
 8000158:	080000a7 	.word	0x080000a7
 800015c:	08000c3c 	.word	0x08000c3c
 8000160:	080000bd 	.word	0x080000bd
 8000164:	08000c58 	.word	0x08000c58

08000168 <pendsv_handler>:
 * wrong stack pointer. PendSV handles calling convention itself.
 */
void __attribute__((naked)) pendsv_handler()
{
	/* Save the old task's context[1] */
	asm volatile("mrs   r0, psp\n"
 8000168:	f3ef 8009 	mrs	r0, PSP
 800016c:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	             "stmdb r0!, {r4-r11, lr}\n");
	/* To save the last task's sp from r0 into its tcb*/
	asm volatile("mov   %0, r0\n" : "=r"(tasks[lastTask].stack));
 8000170:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <pendsv_handler+0x6c>)
 8000172:	681a      	ldr	r2, [r3, #0]
 8000174:	4601      	mov	r1, r0
 8000176:	4818      	ldr	r0, [pc, #96]	; (80001d8 <pendsv_handler+0x70>)
 8000178:	4613      	mov	r3, r2
 800017a:	005b      	lsls	r3, r3, #1
 800017c:	4413      	add	r3, r2
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	4403      	add	r3, r0
 8000182:	6019      	str	r1, [r3, #0]

	/* Find a new task to run */
	while (1) {
		lastTask++;
 8000184:	4b13      	ldr	r3, [pc, #76]	; (80001d4 <pendsv_handler+0x6c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	3301      	adds	r3, #1
 800018a:	4a12      	ldr	r2, [pc, #72]	; (80001d4 <pendsv_handler+0x6c>)
 800018c:	6013      	str	r3, [r2, #0]
		if (lastTask == MAX_TASKS)
 800018e:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <pendsv_handler+0x6c>)
 8000190:	681b      	ldr	r3, [r3, #0]
 8000192:	2b0a      	cmp	r3, #10
 8000194:	d102      	bne.n	800019c <pendsv_handler+0x34>
			lastTask = 0;
 8000196:	4b0f      	ldr	r3, [pc, #60]	; (80001d4 <pendsv_handler+0x6c>)
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
		if (tasks[lastTask].in_use) {
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <pendsv_handler+0x6c>)
 800019e:	681a      	ldr	r2, [r3, #0]
 80001a0:	490d      	ldr	r1, [pc, #52]	; (80001d8 <pendsv_handler+0x70>)
 80001a2:	4613      	mov	r3, r2
 80001a4:	005b      	lsls	r3, r3, #1
 80001a6:	4413      	add	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	440b      	add	r3, r1
 80001ac:	3308      	adds	r3, #8
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d0e7      	beq.n	8000184 <pendsv_handler+0x1c>
			/* Move the task's stack pointer address into r0 */
			asm volatile("mov r0, %0\n" : : "r"(tasks[lastTask].stack));
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <pendsv_handler+0x6c>)
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	4907      	ldr	r1, [pc, #28]	; (80001d8 <pendsv_handler+0x70>)
 80001ba:	4613      	mov	r3, r2
 80001bc:	005b      	lsls	r3, r3, #1
 80001be:	4413      	add	r3, r2
 80001c0:	009b      	lsls	r3, r3, #2
 80001c2:	440b      	add	r3, r1
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4618      	mov	r0, r3
			/* Restore the new task's context and jump to the task */
			asm volatile("ldmia r0!, {r4-r11, lr}\n"
 80001c8:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001cc:	f380 8809 	msr	PSP, r0
 80001d0:	4770      	bx	lr
		lastTask++;
 80001d2:	e7d7      	b.n	8000184 <pendsv_handler+0x1c>
 80001d4:	2000008c 	.word	0x2000008c
 80001d8:	20000014 	.word	0x20000014

080001dc <thread_start>:
 * modifying register at prologue/epilogue sequences and
 * corrupts inline-assembly usage.
 */
void __attribute__((naked)) thread_start()
{
	lastTask = 0;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <thread_start+0x54>)
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
	CONTROL_Type user_ctx = {
 80001e2:	2400      	movs	r4, #0
 80001e4:	4623      	mov	r3, r4
 80001e6:	f043 0401 	orr.w	r4, r3, #1
 80001ea:	4623      	mov	r3, r4
 80001ec:	f043 0402 	orr.w	r4, r3, #2
	};

	/* Reset APSR before context switch
	 * Make sure we have a _clean_ PSR for the task.
	 */
	asm volatile("mov r0, #0\n"
 80001f0:	f04f 0000 	mov.w	r0, #0
 80001f4:	f380 8800 	msr	CPSR_f, r0
	             "msr APSR_nzcvq, r0\n");
	/* Load user task's context and jump to the task */
	__set_PSP((uint32_t) tasks[lastTask].stack);
 80001f8:	4b0d      	ldr	r3, [pc, #52]	; (8000230 <thread_start+0x54>)
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	490d      	ldr	r1, [pc, #52]	; (8000234 <thread_start+0x58>)
 80001fe:	4613      	mov	r3, r2
 8000200:	005b      	lsls	r3, r3, #1
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	440b      	add	r3, r1
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	461d      	mov	r5, r3

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack));
 800020c:	f385 8809 	msr	PSP, r5
}
 8000210:	bf00      	nop
	__set_CONTROL(user_ctx.w);
 8000212:	4623      	mov	r3, r4
 8000214:	461c      	mov	r4, r3
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000216:	f384 8814 	msr	CONTROL, r4
}
 800021a:	bf00      	nop
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 800021c:	f3bf 8f6f 	isb	sy
}
 8000220:	bf00      	nop
	 * psp ->  -------                              -------
	 *
	 * Instead of "pop {r0}", use "ldr r0, [sp]" to ensure consistent
	 * with the way how PendSV saves _old_ context[1].
	 */
	asm volatile("pop {r4-r11, lr}\n"
 8000222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000226:	9800      	ldr	r0, [sp, #0]
	             "ldr r0, [sp]\n");
	/* Okay, we are ready to run first task, get address from
	 * stack[15]. We just pop 9 register so #24 comes from
	 * (15 - 9) * sizeof(entry of sp) = 6 * 4.
	 */
	asm volatile("ldr pc, [sp, #24]\n");
 8000228:	f8dd f018 	ldr.w	pc, [sp, #24]

	/* Never reach here */
	while(1);
 800022c:	e7fe      	b.n	800022c <thread_start+0x50>
 800022e:	bf00      	nop
 8000230:	2000008c 	.word	0x2000008c
 8000234:	20000014 	.word	0x20000014

08000238 <thread_create>:

}

int thread_create(void (*run)(void *), void *userdata)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	/* Find a free thing */
	int threadId = 0;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
	uint32_t *stack;

	for (threadId = 0; threadId < MAX_TASKS; threadId++) {
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	e00d      	b.n	8000268 <thread_create+0x30>
		if (tasks[threadId].in_use == 0)
 800024c:	492f      	ldr	r1, [pc, #188]	; (800030c <thread_create+0xd4>)
 800024e:	68fa      	ldr	r2, [r7, #12]
 8000250:	4613      	mov	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4413      	add	r3, r2
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	440b      	add	r3, r1
 800025a:	3308      	adds	r3, #8
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d006      	beq.n	8000270 <thread_create+0x38>
	for (threadId = 0; threadId < MAX_TASKS; threadId++) {
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	3301      	adds	r3, #1
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	2b09      	cmp	r3, #9
 800026c:	ddee      	ble.n	800024c <thread_create+0x14>
 800026e:	e000      	b.n	8000272 <thread_create+0x3a>
			break;
 8000270:	bf00      	nop
	}

	if (threadId == MAX_TASKS)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b0a      	cmp	r3, #10
 8000276:	d102      	bne.n	800027e <thread_create+0x46>
		return -1;
 8000278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800027c:	e042      	b.n	8000304 <thread_create+0xcc>

	/* Create the stack */
	stack = (uint32_t *) malloc(STACK_SIZE * sizeof(uint32_t));
 800027e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000282:	f000 f89f 	bl	80003c4 <malloc>
 8000286:	60b8      	str	r0, [r7, #8]
	tasks[threadId].orig_stack = stack;
 8000288:	4920      	ldr	r1, [pc, #128]	; (800030c <thread_create+0xd4>)
 800028a:	68fa      	ldr	r2, [r7, #12]
 800028c:	4613      	mov	r3, r2
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	4413      	add	r3, r2
 8000292:	009b      	lsls	r3, r3, #2
 8000294:	440b      	add	r3, r1
 8000296:	3304      	adds	r3, #4
 8000298:	68ba      	ldr	r2, [r7, #8]
 800029a:	601a      	str	r2, [r3, #0]
	if (stack == 0)
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d102      	bne.n	80002a8 <thread_create+0x70>
		return -1;
 80002a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002a6:	e02d      	b.n	8000304 <thread_create+0xcc>

	stack += STACK_SIZE - 17; /* End of stack, minus what we are about to push */
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80002ae:	60bb      	str	r3, [r7, #8]
	stack[8] = (unsigned int) THREAD_PSP;
 80002b0:	68bb      	ldr	r3, [r7, #8]
 80002b2:	3320      	adds	r3, #32
 80002b4:	f06f 0202 	mvn.w	r2, #2
 80002b8:	601a      	str	r2, [r3, #0]
	stack[9] = (unsigned int) userdata;
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	3324      	adds	r3, #36	; 0x24
 80002be:	683a      	ldr	r2, [r7, #0]
 80002c0:	601a      	str	r2, [r3, #0]
	stack[14] = (unsigned) &thread_self_terminal;
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	3338      	adds	r3, #56	; 0x38
 80002c6:	4a12      	ldr	r2, [pc, #72]	; (8000310 <thread_create+0xd8>)
 80002c8:	601a      	str	r2, [r3, #0]
	stack[15] = (unsigned int) run;
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	333c      	adds	r3, #60	; 0x3c
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	601a      	str	r2, [r3, #0]
	stack[16] = (unsigned int) 0x01000000; /* PSR Thumb bit */
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	3340      	adds	r3, #64	; 0x40
 80002d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002da:	601a      	str	r2, [r3, #0]

	/* Construct the control block */
	tasks[threadId].stack = stack;
 80002dc:	490b      	ldr	r1, [pc, #44]	; (800030c <thread_create+0xd4>)
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	4613      	mov	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	4413      	add	r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	440b      	add	r3, r1
 80002ea:	68ba      	ldr	r2, [r7, #8]
 80002ec:	601a      	str	r2, [r3, #0]
	tasks[threadId].in_use = 1;
 80002ee:	4907      	ldr	r1, [pc, #28]	; (800030c <thread_create+0xd4>)
 80002f0:	68fa      	ldr	r2, [r7, #12]
 80002f2:	4613      	mov	r3, r2
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	4413      	add	r3, r2
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	3308      	adds	r3, #8
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]

	return threadId;
 8000302:	68fb      	ldr	r3, [r7, #12]
}
 8000304:	4618      	mov	r0, r3
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000014 	.word	0x20000014
 8000310:	08000355 	.word	0x08000355

08000314 <thread_kill>:

void thread_kill(int thread_id)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	tasks[thread_id].in_use = 0;
 800031c:	490c      	ldr	r1, [pc, #48]	; (8000350 <thread_kill+0x3c>)
 800031e:	687a      	ldr	r2, [r7, #4]
 8000320:	4613      	mov	r3, r2
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	440b      	add	r3, r1
 800032a:	3308      	adds	r3, #8
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]

	/* Free the stack */
	free(tasks[thread_id].orig_stack);
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <thread_kill+0x3c>)
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	4613      	mov	r3, r2
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	4413      	add	r3, r2
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	440b      	add	r3, r1
 800033e:	3304      	adds	r3, #4
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4618      	mov	r0, r3
 8000344:	f000 f8ac 	bl	80004a0 <free>
}
 8000348:	bf00      	nop
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000014 	.word	0x20000014

08000354 <thread_self_terminal>:

void thread_self_terminal()
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
}
 800035a:	bf00      	nop
	/* This will kill the stack.
	 * For now, disable context switches to save ourselves.
	 */
	__disable_irq();
	thread_kill(lastTask);
 800035c:	4b03      	ldr	r3, [pc, #12]	; (800036c <thread_self_terminal+0x18>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ffd7 	bl	8000314 <thread_kill>
  __ASM volatile ("cpsie i" : : : "memory");
 8000366:	b662      	cpsie	i
}
 8000368:	bf00      	nop
	__enable_irq();

	/* And now wait for death to kick in */
	while (1);
 800036a:	e7fe      	b.n	800036a <thread_self_terminal+0x16>
 800036c:	2000008c 	.word	0x2000008c

08000370 <sbrk>:

static Header base; /* empty list to get started */
static Header *freep = NULL; /* start of free list */

static void *sbrk(unsigned int nbytes)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	if (program_break + nbytes >= heaps
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <sbrk+0x48>)
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4413      	add	r3, r2
 8000380:	4a0e      	ldr	r2, [pc, #56]	; (80003bc <sbrk+0x4c>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d311      	bcc.n	80003aa <sbrk+0x3a>
	    && program_break + nbytes < heaps + MAX_HEAPS) {
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <sbrk+0x48>)
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	4a0c      	ldr	r2, [pc, #48]	; (80003c0 <sbrk+0x50>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d20a      	bcs.n	80003aa <sbrk+0x3a>
		unsigned char *previous_pb = program_break;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <sbrk+0x48>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
		program_break += nbytes;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <sbrk+0x48>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <sbrk+0x48>)
 80003a4:	6013      	str	r3, [r2, #0]
		return (void *) previous_pb;
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	e001      	b.n	80003ae <sbrk+0x3e>
	}
	return (void *) -1;
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000090 	.word	0x20000090
 80003c0:	20001090 	.word	0x20001090

080003c4 <malloc>:

void *malloc(unsigned int nbytes)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	Header *p, *prevp;
	unsigned int nunits;
	void *cp;

	nunits = (nbytes + sizeof(Header) - 1) / sizeof(Header) + 1;
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3307      	adds	r3, #7
 80003d0:	08db      	lsrs	r3, r3, #3
 80003d2:	3301      	adds	r3, #1
 80003d4:	60fb      	str	r3, [r7, #12]

	if ((prevp = freep) == NULL) {
 80003d6:	4b30      	ldr	r3, [pc, #192]	; (8000498 <malloc+0xd4>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	613b      	str	r3, [r7, #16]
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d10b      	bne.n	80003fa <malloc+0x36>
		base.s.ptr = freep = prevp = &base;
 80003e2:	4b2e      	ldr	r3, [pc, #184]	; (800049c <malloc+0xd8>)
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	4a2c      	ldr	r2, [pc, #176]	; (8000498 <malloc+0xd4>)
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	6013      	str	r3, [r2, #0]
 80003ec:	4b2a      	ldr	r3, [pc, #168]	; (8000498 <malloc+0xd4>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a2a      	ldr	r2, [pc, #168]	; (800049c <malloc+0xd8>)
 80003f2:	6013      	str	r3, [r2, #0]
		base.s.size = 0;
 80003f4:	4b29      	ldr	r3, [pc, #164]	; (800049c <malloc+0xd8>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	605a      	str	r2, [r3, #4]
	}

	for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr) {
 80003fa:	693b      	ldr	r3, [r7, #16]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	617b      	str	r3, [r7, #20]
		if (p->s.size >= nunits) {
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	68fa      	ldr	r2, [r7, #12]
 8000406:	429a      	cmp	r2, r3
 8000408:	d81e      	bhi.n	8000448 <malloc+0x84>
			if (p->s.size == nunits) {
 800040a:	697b      	ldr	r3, [r7, #20]
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	68fa      	ldr	r2, [r7, #12]
 8000410:	429a      	cmp	r2, r3
 8000412:	d104      	bne.n	800041e <malloc+0x5a>
				prevp->s.ptr = p->s.ptr;
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	681a      	ldr	r2, [r3, #0]
 8000418:	693b      	ldr	r3, [r7, #16]
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	e00e      	b.n	800043c <malloc+0x78>
			} else {
				p->s.size -= nunits;
 800041e:	697b      	ldr	r3, [r7, #20]
 8000420:	685a      	ldr	r2, [r3, #4]
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	1ad2      	subs	r2, r2, r3
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	605a      	str	r2, [r3, #4]
				p += p->s.size;
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	00db      	lsls	r3, r3, #3
 8000430:	697a      	ldr	r2, [r7, #20]
 8000432:	4413      	add	r3, r2
 8000434:	617b      	str	r3, [r7, #20]
				p->s.size = nunits;
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	605a      	str	r2, [r3, #4]
			}
			freep = prevp;
 800043c:	4a16      	ldr	r2, [pc, #88]	; (8000498 <malloc+0xd4>)
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	6013      	str	r3, [r2, #0]
			return (void *)(p + 1);
 8000442:	697b      	ldr	r3, [r7, #20]
 8000444:	3308      	adds	r3, #8
 8000446:	e023      	b.n	8000490 <malloc+0xcc>
		}

		if (p == freep) {
 8000448:	4b13      	ldr	r3, [pc, #76]	; (8000498 <malloc+0xd4>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	429a      	cmp	r2, r3
 8000450:	d118      	bne.n	8000484 <malloc+0xc0>
			cp = sbrk(nunits * sizeof(Header));
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	00db      	lsls	r3, r3, #3
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff8a 	bl	8000370 <sbrk>
 800045c:	60b8      	str	r0, [r7, #8]
			if (cp == (void *) - 1) {
 800045e:	68bb      	ldr	r3, [r7, #8]
 8000460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000464:	d101      	bne.n	800046a <malloc+0xa6>
				return NULL;
 8000466:	2300      	movs	r3, #0
 8000468:	e012      	b.n	8000490 <malloc+0xcc>
			} else {
				p = (Header *) cp;
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	617b      	str	r3, [r7, #20]
				p->s.size = nunits;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	68fa      	ldr	r2, [r7, #12]
 8000472:	605a      	str	r2, [r3, #4]
				free((void *)(p + 1));
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	3308      	adds	r3, #8
 8000478:	4618      	mov	r0, r3
 800047a:	f000 f811 	bl	80004a0 <free>
				p = freep;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <malloc+0xd4>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	617b      	str	r3, [r7, #20]
	for (p = prevp->s.ptr; ; prevp = p, p = p->s.ptr) {
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	613b      	str	r3, [r7, #16]
 8000488:	697b      	ldr	r3, [r7, #20]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	617b      	str	r3, [r7, #20]
		if (p->s.size >= nunits) {
 800048e:	e7b7      	b.n	8000400 <malloc+0x3c>
			}
		}
	}
}
 8000490:	4618      	mov	r0, r3
 8000492:	3718      	adds	r7, #24
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	20001098 	.word	0x20001098
 800049c:	20001090 	.word	0x20001090

080004a0 <free>:

void free(void *ap)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	Header *bp, *p;
	bp = (Header *) ap - 1;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3b08      	subs	r3, #8
 80004ac:	60bb      	str	r3, [r7, #8]

	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr) {
 80004ae:	4b2c      	ldr	r3, [pc, #176]	; (8000560 <free+0xc0>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	60fb      	str	r3, [r7, #12]
 80004b4:	e010      	b.n	80004d8 <free+0x38>
		if (p >= p->s.ptr && (bp > p || bp < p->s.ptr))
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d308      	bcc.n	80004d2 <free+0x32>
 80004c0:	68ba      	ldr	r2, [r7, #8]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d810      	bhi.n	80004ea <free+0x4a>
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d30b      	bcc.n	80004ea <free+0x4a>
	for (p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr) {
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68ba      	ldr	r2, [r7, #8]
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d9ea      	bls.n	80004b6 <free+0x16>
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	68ba      	ldr	r2, [r7, #8]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d2e5      	bcs.n	80004b6 <free+0x16>
			break;
	}

	if (bp + bp->s.size == p->s.ptr) {
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	441a      	add	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d10d      	bne.n	8000518 <free+0x78>
		bp->s.size += p->s.ptr->s.size;
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	441a      	add	r2, r3
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	605a      	str	r2, [r3, #4]
		bp->s.ptr = p->s.ptr->s.ptr;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e003      	b.n	8000520 <free+0x80>
	} else {
		bp->s.ptr = p->s.ptr;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	601a      	str	r2, [r3, #0]
	}

	if (p + p->s.size == bp) {
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	685b      	ldr	r3, [r3, #4]
 8000524:	00db      	lsls	r3, r3, #3
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	4413      	add	r3, r2
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	429a      	cmp	r2, r3
 800052e:	d10b      	bne.n	8000548 <free+0xa8>
		p->s.size += bp->s.size;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	685a      	ldr	r2, [r3, #4]
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	441a      	add	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	605a      	str	r2, [r3, #4]
		p->s.ptr = bp->s.ptr;
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	e002      	b.n	800054e <free+0xae>
	} else {
		p->s.ptr = bp;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	68ba      	ldr	r2, [r7, #8]
 800054c:	601a      	str	r2, [r3, #0]
	}

	freep = p;
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <free+0xc0>)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	6013      	str	r3, [r2, #0]
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	20001098 	.word	0x20001098

08000564 <stream_init>:
#include "stream.h"
#include "uart.h"

void stream_init(STREAM stream_type)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	71fb      	strb	r3, [r7, #7]
	switch (stream_type) {
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d102      	bne.n	800057a <stream_init+0x16>
	case USART:
		uart_init();
 8000574:	f000 fa52 	bl	8000a1c <uart_init>
		break;
 8000578:	e000      	b.n	800057c <stream_init+0x18>
	default:
		break;
 800057a:	bf00      	nop
	}
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <stream_write>:


void stream_write(STREAM stream_type, const char *data)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
	switch (stream_type) {
 8000590:	79fb      	ldrb	r3, [r7, #7]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d103      	bne.n	800059e <stream_write+0x1a>
	case USART:
		uart_write(data);
 8000596:	6838      	ldr	r0, [r7, #0]
 8000598:	f000 fa50 	bl	8000a3c <uart_write>
		break;
 800059c:	e000      	b.n	80005a0 <stream_write+0x1c>
	default:
		break;
 800059e:	bf00      	nop
	}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <RCC_GetClocksFreq>:

#define HSI_VALUE ((uint32_t)16000000)
#define HSE_VALUE ((uint32_t)8000000)

static void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
 80005bc:	2302      	movs	r3, #2
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	2302      	movs	r3, #2
 80005c6:	60bb      	str	r3, [r7, #8]

	/* Get SYSCLK source -------------------------------------------------------*/
	tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005c8:	4b4a      	ldr	r3, [pc, #296]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f003 030c 	and.w	r3, r3, #12
 80005d0:	61bb      	str	r3, [r7, #24]

	switch (tmp) {
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2b08      	cmp	r3, #8
 80005d6:	d011      	beq.n	80005fc <RCC_GetClocksFreq+0x54>
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	2b08      	cmp	r3, #8
 80005dc:	d844      	bhi.n	8000668 <RCC_GetClocksFreq+0xc0>
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d003      	beq.n	80005ec <RCC_GetClocksFreq+0x44>
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	2b04      	cmp	r3, #4
 80005e8:	d004      	beq.n	80005f4 <RCC_GetClocksFreq+0x4c>
 80005ea:	e03d      	b.n	8000668 <RCC_GetClocksFreq+0xc0>
	case 0x00:  /* HSI used as system clock source */
		RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a42      	ldr	r2, [pc, #264]	; (80006f8 <RCC_GetClocksFreq+0x150>)
 80005f0:	601a      	str	r2, [r3, #0]
		break;
 80005f2:	e03d      	b.n	8000670 <RCC_GetClocksFreq+0xc8>
	case 0x04:  /* HSE used as system clock  source */
		RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a41      	ldr	r2, [pc, #260]	; (80006fc <RCC_GetClocksFreq+0x154>)
 80005f8:	601a      	str	r2, [r3, #0]
		break;
 80005fa:	e039      	b.n	8000670 <RCC_GetClocksFreq+0xc8>
	case 0x08:  /* PLL used as system clock  source */

		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		   SYSCLK = PLL_VCO / PLLP
		   */
		pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80005fc:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	0d9b      	lsrs	r3, r3, #22
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000608:	4b3a      	ldr	r3, [pc, #232]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000610:	60bb      	str	r3, [r7, #8]

		if (pllsource != 0) {
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d00c      	beq.n	8000632 <RCC_GetClocksFreq+0x8a>
			/* HSE used as PLL clock source */
			pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000618:	4a38      	ldr	r2, [pc, #224]	; (80006fc <RCC_GetClocksFreq+0x154>)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	4a34      	ldr	r2, [pc, #208]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 8000622:	6852      	ldr	r2, [r2, #4]
 8000624:	0992      	lsrs	r2, r2, #6
 8000626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800062a:	fb02 f303 	mul.w	r3, r2, r3
 800062e:	61fb      	str	r3, [r7, #28]
 8000630:	e00b      	b.n	800064a <RCC_GetClocksFreq+0xa2>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000632:	4a31      	ldr	r2, [pc, #196]	; (80006f8 <RCC_GetClocksFreq+0x150>)
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4a2e      	ldr	r2, [pc, #184]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 800063c:	6852      	ldr	r2, [r2, #4]
 800063e:	0992      	lsrs	r2, r2, #6
 8000640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000644:	fb02 f303 	mul.w	r3, r2, r3
 8000648:	61fb      	str	r3, [r7, #28]
		}

		pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> 16) + 1) * 2;
 800064a:	4b2a      	ldr	r3, [pc, #168]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	0c1b      	lsrs	r3, r3, #16
 8000650:	f003 0303 	and.w	r3, r3, #3
 8000654:	3301      	adds	r3, #1
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	613b      	str	r3, [r7, #16]
		RCC_Clocks->SYSCLK_Frequency = pllvco / pllp;
 800065a:	69fa      	ldr	r2, [r7, #28]
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	601a      	str	r2, [r3, #0]
		break;
 8000666:	e003      	b.n	8000670 <RCC_GetClocksFreq+0xc8>
	default:
		RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <RCC_GetClocksFreq+0x150>)
 800066c:	601a      	str	r2, [r3, #0]
		break;
 800066e:	bf00      	nop
	}
	/* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

	/* Get HCLK prescaler */
	tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000670:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000678:	61bb      	str	r3, [r7, #24]
	tmp = tmp >> 4;
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	61bb      	str	r3, [r7, #24]
	presc = APBAHBPrescTable[tmp];
 8000680:	4a1f      	ldr	r2, [pc, #124]	; (8000700 <RCC_GetClocksFreq+0x158>)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	617b      	str	r3, [r7, #20]
	/* HCLK clock frequency */
	RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	40da      	lsrs	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	605a      	str	r2, [r3, #4]

	/* Get PCLK1 prescaler */
	tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000698:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80006a0:	61bb      	str	r3, [r7, #24]
	tmp = tmp >> 10;
 80006a2:	69bb      	ldr	r3, [r7, #24]
 80006a4:	0a9b      	lsrs	r3, r3, #10
 80006a6:	61bb      	str	r3, [r7, #24]
	presc = APBAHBPrescTable[tmp];
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <RCC_GetClocksFreq+0x158>)
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	617b      	str	r3, [r7, #20]
	/* PCLK1 clock frequency */
	RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	609a      	str	r2, [r3, #8]

	/* Get PCLK2 prescaler */
	tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <RCC_GetClocksFreq+0x14c>)
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80006c8:	61bb      	str	r3, [r7, #24]
	tmp = tmp >> 13;
 80006ca:	69bb      	ldr	r3, [r7, #24]
 80006cc:	0b5b      	lsrs	r3, r3, #13
 80006ce:	61bb      	str	r3, [r7, #24]
	presc = APBAHBPrescTable[tmp];
 80006d0:	4a0b      	ldr	r2, [pc, #44]	; (8000700 <RCC_GetClocksFreq+0x158>)
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	4413      	add	r3, r2
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	617b      	str	r3, [r7, #20]
	/* PCLK2 clock frequency */
	RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60da      	str	r2, [r3, #12]
}
 80006e8:	bf00      	nop
 80006ea:	3724      	adds	r7, #36	; 0x24
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800
 80006f8:	00f42400 	.word	0x00f42400
 80006fc:	007a1200 	.word	0x007a1200
 8000700:	20000004 	.word	0x20000004

08000704 <usart_baud_calc>:



/* Calculates the value for the USART_BRR */
static uint16_t usart_baud_calc(uint32_t base, USART_TypeDef *USARTx, uint32_t baudrate)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000714:	2300      	movs	r3, #0
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t integerdivider = 0x00;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t fractionaldivider = 0x00;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
	RCC_ClocksTypeDef RCC_ClocksStatus;

	/* Configure the USART Baud Rate */
	RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000720:	f107 0310 	add.w	r3, r7, #16
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff3f 	bl	80005a8 <RCC_GetClocksFreq>

	if ((base == USART1_BASE) || (base == USART6_BASE)) {
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4a2e      	ldr	r2, [pc, #184]	; (80007e8 <usart_baud_calc+0xe4>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d003      	beq.n	800073a <usart_baud_calc+0x36>
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <usart_baud_calc+0xe8>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d102      	bne.n	8000740 <usart_baud_calc+0x3c>
		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
 800073e:	e001      	b.n	8000744 <usart_baud_calc+0x40>
	} else {
		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	/* Determine the integer part */
	if ((USARTx->CR1 & USART_CR1_OVER8) != 0) {
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800074c:	2b00      	cmp	r3, #0
 800074e:	d00b      	beq.n	8000768 <usart_baud_calc+0x64>
		/* Integer part computing in case Oversampling mode is 8 Samples */
		integerdivider = ((25 * apbclock) / (2 * (baudrate)));
 8000750:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000752:	4613      	mov	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4413      	add	r3, r2
 8000758:	009a      	lsls	r2, r3, #2
 800075a:	441a      	add	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	fbb2 f3f3 	udiv	r3, r2, r3
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
 8000766:	e00a      	b.n	800077e <usart_baud_calc+0x7a>
	} else {
		/* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
		/* Integer part computing in case Oversampling mode is 16 Samples */
		integerdivider = ((25 * apbclock) / (4 * (baudrate)));
 8000768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800076a:	4613      	mov	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4413      	add	r3, r2
 8000770:	009a      	lsls	r2, r3, #2
 8000772:	441a      	add	r2, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	fbb2 f3f3 	udiv	r3, r2, r3
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	tmpreg = (integerdivider / 100) << 4;
 800077e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000780:	4a1b      	ldr	r2, [pc, #108]	; (80007f0 <usart_baud_calc+0xec>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Determine the fractional part */
	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800078c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800078e:	091b      	lsrs	r3, r3, #4
 8000790:	2264      	movs	r2, #100	; 0x64
 8000792:	fb02 f303 	mul.w	r3, r2, r3
 8000796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	623b      	str	r3, [r7, #32]

	/* Implement the fractional part in the register */
	if ((USARTx->CR1 & USART_CR1_OVER8) != 0) {
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00c      	beq.n	80007c2 <usart_baud_calc+0xbe>
		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	00db      	lsls	r3, r3, #3
 80007ac:	3332      	adds	r3, #50	; 0x32
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <usart_baud_calc+0xec>)
 80007b0:	fba2 2303 	umull	r2, r3, r2, r3
 80007b4:	095b      	lsrs	r3, r3, #5
 80007b6:	f003 0307 	and.w	r3, r3, #7
 80007ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007bc:	4313      	orrs	r3, r2
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007c0:	e00b      	b.n	80007da <usart_baud_calc+0xd6>
	} else {
		/* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80007c2:	6a3b      	ldr	r3, [r7, #32]
 80007c4:	011b      	lsls	r3, r3, #4
 80007c6:	3332      	adds	r3, #50	; 0x32
 80007c8:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <usart_baud_calc+0xec>)
 80007ca:	fba2 2303 	umull	r2, r3, r2, r3
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	f003 030f 	and.w	r3, r3, #15
 80007d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d6:	4313      	orrs	r3, r2
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	/* Write to USART BRR register */
	return (uint16_t)tmpreg;
 80007da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007dc:	b29b      	uxth	r3, r3
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3730      	adds	r7, #48	; 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40011000 	.word	0x40011000
 80007ec:	40011400 	.word	0x40011400
 80007f0:	51eb851f 	.word	0x51eb851f

080007f4 <enableUartPeripheralCLOCK>:

/*
 * USART1:APB2ENR;  GPIOA:AHB1
 */
static void enableUartPeripheralCLOCK(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <enableUartPeripheralCLOCK+0x24>)
 80007fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fc:	4a06      	ldr	r2, [pc, #24]	; (8000818 <enableUartPeripheralCLOCK+0x24>)
 80007fe:	f043 0310 	orr.w	r3, r3, #16
 8000802:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000804:	4b04      	ldr	r3, [pc, #16]	; (8000818 <enableUartPeripheralCLOCK+0x24>)
 8000806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000808:	4a03      	ldr	r2, [pc, #12]	; (8000818 <enableUartPeripheralCLOCK+0x24>)
 800080a:	f043 0301 	orr.w	r3, r3, #1
 800080e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40023800 	.word	0x40023800

0800081c <enableGPIO>:
#define GPIO_MODER_ALT                  (uint32_t) (0x2)                   /* Alternative function mode */
/*
 * All GPIO(contains USARTs) on AHB1
 */
static void enableGPIO(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
	uint8_t pin_tx = 9;  /*Tx=PA9*/
 8000822:	2309      	movs	r3, #9
 8000824:	73fb      	strb	r3, [r7, #15]
	uint8_t pin_rx = 10; /*Rx=PA10*/
 8000826:	230a      	movs	r3, #10
 8000828:	73bb      	strb	r3, [r7, #14]

	/*
	 * Set to be non Push-pull
	 */
	uint32_t mode = GPIO_PUPDR_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_M(pin_tx));
 800082e:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <enableGPIO+0x188>)
 8000830:	68da      	ldr	r2, [r3, #12]
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	2103      	movs	r1, #3
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	4959      	ldr	r1, [pc, #356]	; (80009a4 <enableGPIO+0x188>)
 8000840:	4013      	ands	r3, r2
 8000842:	60cb      	str	r3, [r1, #12]
	GPIOA->PUPDR |= (mode << GPIO_PUPDR_PIN(pin_tx));
 8000844:	4b57      	ldr	r3, [pc, #348]	; (80009a4 <enableGPIO+0x188>)
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	4619      	mov	r1, r3
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	408b      	lsls	r3, r1
 8000852:	4954      	ldr	r1, [pc, #336]	; (80009a4 <enableGPIO+0x188>)
 8000854:	4313      	orrs	r3, r2
 8000856:	60cb      	str	r3, [r1, #12]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_M(pin_rx));
 8000858:	4b52      	ldr	r3, [pc, #328]	; (80009a4 <enableGPIO+0x188>)
 800085a:	68da      	ldr	r2, [r3, #12]
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	2103      	movs	r1, #3
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	494e      	ldr	r1, [pc, #312]	; (80009a4 <enableGPIO+0x188>)
 800086a:	4013      	ands	r3, r2
 800086c:	60cb      	str	r3, [r1, #12]
	GPIOA->PUPDR |= (mode << GPIO_PUPDR_PIN(pin_rx));
 800086e:	4b4d      	ldr	r3, [pc, #308]	; (80009a4 <enableGPIO+0x188>)
 8000870:	68da      	ldr	r2, [r3, #12]
 8000872:	7bbb      	ldrb	r3, [r7, #14]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	4619      	mov	r1, r3
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	408b      	lsls	r3, r1
 800087c:	4949      	ldr	r1, [pc, #292]	; (80009a4 <enableGPIO+0x188>)
 800087e:	4313      	orrs	r3, r2
 8000880:	60cb      	str	r3, [r1, #12]

	/*
	 * Mode type
	 * Set to be alternative function
	 */
	uint32_t type = GPIO_MODER_ALT;
 8000882:	2302      	movs	r3, #2
 8000884:	607b      	str	r3, [r7, #4]
	GPIOA->MODER &= ~(GPIO_MODER_M(pin_tx));
 8000886:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <enableGPIO+0x188>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	7bfb      	ldrb	r3, [r7, #15]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	2103      	movs	r1, #3
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	43db      	mvns	r3, r3
 8000896:	4943      	ldr	r1, [pc, #268]	; (80009a4 <enableGPIO+0x188>)
 8000898:	4013      	ands	r3, r2
 800089a:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= (type << GPIO_MODER_PIN(pin_tx));
 800089c:	4b41      	ldr	r3, [pc, #260]	; (80009a4 <enableGPIO+0x188>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	4619      	mov	r1, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	408b      	lsls	r3, r1
 80008aa:	493e      	ldr	r1, [pc, #248]	; (80009a4 <enableGPIO+0x188>)
 80008ac:	4313      	orrs	r3, r2
 80008ae:	600b      	str	r3, [r1, #0]
	GPIOA->MODER &= ~(GPIO_MODER_M(pin_rx));
 80008b0:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <enableGPIO+0x188>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	7bbb      	ldrb	r3, [r7, #14]
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	2103      	movs	r1, #3
 80008ba:	fa01 f303 	lsl.w	r3, r1, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	4938      	ldr	r1, [pc, #224]	; (80009a4 <enableGPIO+0x188>)
 80008c2:	4013      	ands	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= (type << GPIO_MODER_PIN(pin_rx));
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <enableGPIO+0x188>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	7bbb      	ldrb	r3, [r7, #14]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	408b      	lsls	r3, r1
 80008d4:	4933      	ldr	r1, [pc, #204]	; (80009a4 <enableGPIO+0x188>)
 80008d6:	4313      	orrs	r3, r2
 80008d8:	600b      	str	r3, [r1, #0]

	/*
	 * For Alternative-Function,assign AF
	 * USART1/2/3 are all AF7
	 */
	GPIOA->AFR[1] &= ~0xF0; /* Pin 9,tx */
 80008da:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <enableGPIO+0x188>)
 80008dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008de:	4a31      	ldr	r2, [pc, #196]	; (80009a4 <enableGPIO+0x188>)
 80008e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80008e4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x7 << 4);
 80008e6:	4b2f      	ldr	r3, [pc, #188]	; (80009a4 <enableGPIO+0x188>)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	4a2e      	ldr	r2, [pc, #184]	; (80009a4 <enableGPIO+0x188>)
 80008ec:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80008f0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] &= ~0xF00; /* Pin 10,rx */
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <enableGPIO+0x188>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	4a2b      	ldr	r2, [pc, #172]	; (80009a4 <enableGPIO+0x188>)
 80008f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80008fc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->AFR[1] |= (0x7 << 8);
 80008fe:	4b29      	ldr	r3, [pc, #164]	; (80009a4 <enableGPIO+0x188>)
 8000900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000902:	4a28      	ldr	r2, [pc, #160]	; (80009a4 <enableGPIO+0x188>)
 8000904:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000908:	6253      	str	r3, [r2, #36]	; 0x24
	 * GPIO output type
	 */
#define GPIO_OTYPER_M(n)                (uint32_t) (1 << n)                  /* Pin mask */
#define GPIO_OTYPER_PIN(n)              (uint32_t) (n)                       /* Pin bitshift */
#define GPIO_OTYPER_OUTPUT_PUSHPULL     0                                    /* Push Pull */
	GPIOA->OTYPER &= ~GPIO_OTYPER_M(pin_tx);
 800090a:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <enableGPIO+0x188>)
 800090c:	685a      	ldr	r2, [r3, #4]
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	4922      	ldr	r1, [pc, #136]	; (80009a4 <enableGPIO+0x188>)
 800091a:	4013      	ands	r3, r2
 800091c:	604b      	str	r3, [r1, #4]
	GPIOA->OTYPER |= (GPIO_OTYPER_OUTPUT_PUSHPULL << GPIO_OTYPER_PIN(pin_tx));
 800091e:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <enableGPIO+0x188>)
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <enableGPIO+0x188>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	6053      	str	r3, [r2, #4]
	GPIOA->OTYPER &= ~GPIO_OTYPER_M(pin_rx);
 8000926:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <enableGPIO+0x188>)
 8000928:	685a      	ldr	r2, [r3, #4]
 800092a:	7bbb      	ldrb	r3, [r7, #14]
 800092c:	2101      	movs	r1, #1
 800092e:	fa01 f303 	lsl.w	r3, r1, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	491b      	ldr	r1, [pc, #108]	; (80009a4 <enableGPIO+0x188>)
 8000936:	4013      	ands	r3, r2
 8000938:	604b      	str	r3, [r1, #4]
	GPIOA->OTYPER |= (GPIO_OTYPER_OUTPUT_PUSHPULL << GPIO_OTYPER_PIN(pin_rx));
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <enableGPIO+0x188>)
 800093c:	4a19      	ldr	r2, [pc, #100]	; (80009a4 <enableGPIO+0x188>)
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	6053      	str	r3, [r2, #4]
	 * GPIO speed
	 */
#define GPIO_OSPEEDR_M(n)               (uint32_t) (0x3 << (2*n))           /* Pin mask */
#define GPIO_OSPEEDR_PIN(n)             (uint32_t) (2*n)                    /* Pin bitshift */
#define GPIO_OSPEEDR_50M                (uint32_t) (0x2)                    /* Output speed 50MHz */
	uint32_t speed = GPIO_OSPEEDR_50M;
 8000942:	2302      	movs	r3, #2
 8000944:	603b      	str	r3, [r7, #0]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_M(pin_tx));
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <enableGPIO+0x188>)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	4913      	ldr	r1, [pc, #76]	; (80009a4 <enableGPIO+0x188>)
 8000958:	4013      	ands	r3, r2
 800095a:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |= (speed << GPIO_OSPEEDR_PIN(pin_tx));
 800095c:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <enableGPIO+0x188>)
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	4619      	mov	r1, r3
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	408b      	lsls	r3, r1
 800096a:	490e      	ldr	r1, [pc, #56]	; (80009a4 <enableGPIO+0x188>)
 800096c:	4313      	orrs	r3, r2
 800096e:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_M(pin_rx));
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <enableGPIO+0x188>)
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	7bbb      	ldrb	r3, [r7, #14]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	2103      	movs	r1, #3
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	4908      	ldr	r1, [pc, #32]	; (80009a4 <enableGPIO+0x188>)
 8000982:	4013      	ands	r3, r2
 8000984:	608b      	str	r3, [r1, #8]
	GPIOA->OSPEEDR |= (speed << GPIO_OSPEEDR_PIN(pin_rx));
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <enableGPIO+0x188>)
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	7bbb      	ldrb	r3, [r7, #14]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4619      	mov	r1, r3
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	408b      	lsls	r3, r1
 8000994:	4903      	ldr	r1, [pc, #12]	; (80009a4 <enableGPIO+0x188>)
 8000996:	4313      	orrs	r3, r2
 8000998:	608b      	str	r3, [r1, #8]


}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40020000 	.word	0x40020000

080009a8 <enableUART>:

static void enableUART(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	/*******************************___CR2___********************************/
	/*
	 * 00 = 1 stop-bit
	 */
	USART1->CR2 &= ~USART_CR2_STOP;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <enableUART+0x70>)
 80009ae:	691b      	ldr	r3, [r3, #16]
 80009b0:	4a19      	ldr	r2, [pc, #100]	; (8000a18 <enableUART+0x70>)
 80009b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009b6:	6113      	str	r3, [r2, #16]

	/*******************************___CR1___********************************/
	/*
	 * Word Length : 8 Data bits
	 */
	USART1->CR1 &= ~USART_CR1_M;
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <enableUART+0x70>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <enableUART+0x70>)
 80009be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009c2:	60d3      	str	r3, [r2, #12]

	/*
	 * Parity bit NO
	 */
	USART1->CR1 &= ~USART_CR1_PCE;
 80009c4:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <enableUART+0x70>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <enableUART+0x70>)
 80009ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80009ce:	60d3      	str	r3, [r2, #12]

	/*
	 * USART Mode
	 */
	USART1->CR1 |= (USART_CR1_RE | USART_CR1_TE);
 80009d0:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <enableUART+0x70>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <enableUART+0x70>)
 80009d6:	f043 030c 	orr.w	r3, r3, #12
 80009da:	60d3      	str	r3, [r2, #12]

	/*******************************___CR3___********************************/
	/*
	 * Flow Control don't need
	 */
	USART1->CR3 &= ~USART_CR3_RTSE; /* disable RTS flow control */
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <enableUART+0x70>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <enableUART+0x70>)
 80009e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009e6:	6153      	str	r3, [r2, #20]
	USART1->CR3 &= ~USART_CR3_CTSE; /* disable CTS flow control */
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <enableUART+0x70>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <enableUART+0x70>)
 80009ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009f2:	6153      	str	r3, [r2, #20]

	/*******************************___BRR___********************************/
	/*
	 * Set baud-rate
	 */
	USART1->BRR = usart_baud_calc(USART1_BASE, USART1, 115200);
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <enableUART+0x70>)
 80009fa:	4807      	ldr	r0, [pc, #28]	; (8000a18 <enableUART+0x70>)
 80009fc:	f7ff fe82 	bl	8000704 <usart_baud_calc>
 8000a00:	4603      	mov	r3, r0
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <enableUART+0x70>)
 8000a06:	609a      	str	r2, [r3, #8]

	/*
	 * Enable USART
	 */
	USART1->CR1 |= USART_CR1_UE;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <enableUART+0x70>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	4a02      	ldr	r2, [pc, #8]	; (8000a18 <enableUART+0x70>)
 8000a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40011000 	.word	0x40011000

08000a1c <uart_init>:

/*
 * USART1: Tx=PA9 , Rx=PA10
 */
void uart_init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	enableUartPeripheralCLOCK();
 8000a20:	f7ff fee8 	bl	80007f4 <enableUartPeripheralCLOCK>
	enableGPIO();
 8000a24:	f7ff fefa 	bl	800081c <enableGPIO>
	enableUART();
 8000a28:	f7ff ffbe 	bl	80009a8 <enableUART>
	uart_write("USART initialized!\r\n");
 8000a2c:	4802      	ldr	r0, [pc, #8]	; (8000a38 <uart_init+0x1c>)
 8000a2e:	f000 f805 	bl	8000a3c <uart_write>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	08000c74 	.word	0x08000c74

08000a3c <uart_write>:

void uart_write(const char *str)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000a44:	e00d      	b.n	8000a62 <uart_write+0x26>
		while (!(USART1->SR & USART_SR_TXE))
 8000a46:	bf00      	nop
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <uart_write+0x3c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0f9      	beq.n	8000a48 <uart_write+0xc>
			;
		USART1->DR = (*str & 0xFF);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	781a      	ldrb	r2, [r3, #0]
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <uart_write+0x3c>)
 8000a5a:	605a      	str	r2, [r3, #4]
		str++;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	607b      	str	r3, [r7, #4]
	while (*str) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d1ed      	bne.n	8000a46 <uart_write+0xa>
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	40011000 	.word	0x40011000

08000a7c <systick_handler>:
#include "reg.h"
#include "systick.h"


void systick_handler()
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <systick_handler+0x18>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <systick_handler+0x18>)
 8000a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	6053      	str	r3, [r2, #4]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <SysTick_init>:

void SysTick_init(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	/* SysTick configuration */
	SysTick->LOAD = (CPU_CLOCK_HZ / TICK_RATE_HZ) - 1UL;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SysTick_init+0x20>)
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <SysTick_init+0x24>)
 8000aa0:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <SysTick_init+0x20>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0x07;
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <SysTick_init+0x20>)
 8000aaa:	2207      	movs	r2, #7
 8000aac:	601a      	str	r2, [r3, #0]
}
 8000aae:	bf00      	nop
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e010 	.word	0xe000e010
 8000abc:	0112a87f 	.word	0x0112a87f

08000ac0 <reset_handler>:
extern uint32_t _estack;

void rcc_clock_init(void);

void reset_handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
	/* Copy the data segment initializers from flash to SRAM */
	uint32_t *idata_begin = &_sidata;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <reset_handler+0x58>)
 8000ac8:	617b      	str	r3, [r7, #20]
	uint32_t *data_begin = &_sdata;
 8000aca:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <reset_handler+0x5c>)
 8000acc:	613b      	str	r3, [r7, #16]
	uint32_t *data_end = &_edata;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <reset_handler+0x60>)
 8000ad0:	60bb      	str	r3, [r7, #8]
	while (data_begin < data_end) *data_begin++ = *idata_begin++;
 8000ad2:	e007      	b.n	8000ae4 <reset_handler+0x24>
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	1d13      	adds	r3, r2, #4
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	1d19      	adds	r1, r3, #4
 8000ade:	6139      	str	r1, [r7, #16]
 8000ae0:	6812      	ldr	r2, [r2, #0]
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d3f3      	bcc.n	8000ad4 <reset_handler+0x14>

	/* Zero fill the bss segment. */
	uint32_t *bss_begin = &_sbss;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <reset_handler+0x64>)
 8000aee:	60fb      	str	r3, [r7, #12]
	uint32_t *bss_end = &_ebss;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <reset_handler+0x68>)
 8000af2:	607b      	str	r3, [r7, #4]
	while (bss_begin < bss_end) *bss_begin++ = 0;
 8000af4:	e004      	b.n	8000b00 <reset_handler+0x40>
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	1d1a      	adds	r2, r3, #4
 8000afa:	60fa      	str	r2, [r7, #12]
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d3f6      	bcc.n	8000af6 <reset_handler+0x36>

	/* Clock system intitialization */
	rcc_clock_init();
 8000b08:	f000 f813 	bl	8000b32 <rcc_clock_init>

	main();
 8000b0c:	f7ff fae1 	bl	80000d2 <main>
}
 8000b10:	bf00      	nop
 8000b12:	3718      	adds	r7, #24
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	08000c8c 	.word	0x08000c8c
 8000b1c:	20000000 	.word	0x20000000
 8000b20:	20000014 	.word	0x20000014
 8000b24:	20000014 	.word	0x20000014
 8000b28:	2000109c 	.word	0x2000109c

08000b2c <default_handler>:

void default_handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
	while (1);
 8000b30:	e7fe      	b.n	8000b30 <default_handler+0x4>

08000b32 <rcc_clock_init>:
	[0x0E] = (uint32_t *) pendsv_handler,		/* pendsv handler */
	[0x0F] = (uint32_t *) systick_handler		/* systick handler */
};

void rcc_clock_init(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
	/* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
	/* Configure the Flash Latency cycles and enable prefetch buffer */
	volatile uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	603b      	str	r3, [r7, #0]

	/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	/* Enable HSE */
	RCC->CR |= RCC_CR_HSEON;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b4a:	6013      	str	r3, [r2, #0]


	/* Wait till HSE is ready and if Time out is reached exit */
	do {
		HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	603b      	str	r3, [r7, #0]
		StartUpCounter++;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	607b      	str	r3, [r7, #4]
	} while ((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d103      	bne.n	8000b6a <rcc_clock_init+0x38>
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b68:	d1f0      	bne.n	8000b4c <rcc_clock_init+0x1a>


	if ((RCC->CR & RCC_CR_HSERDY) != 0) {
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <rcc_clock_init+0x4a>
		HSEStatus = (uint32_t) 0x01;
 8000b76:	2301      	movs	r3, #1
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	e001      	b.n	8000b80 <rcc_clock_init+0x4e>
	} else {
		HSEStatus = (uint32_t) 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	603b      	str	r3, [r7, #0]
	}

	if (HSEStatus == (uint32_t) 0x01) {
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d12e      	bne.n	8000be4 <rcc_clock_init+0xb2>
		/* Enable Prefetch Buffer */
		FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <rcc_clock_init+0xc2>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <rcc_clock_init+0xc2>)
 8000b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b90:	6013      	str	r3, [r2, #0]

		/* Flash clear wait state */
		FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <rcc_clock_init+0xc2>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <rcc_clock_init+0xc2>)
 8000b98:	f023 030f 	bic.w	r3, r3, #15
 8000b9c:	6013      	str	r3, [r2, #0]

		/* Flash 0 latency*/
		FLASH->ACR |= FLASH_ACR_LATENCY_0WS;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <rcc_clock_init+0xc2>)
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <rcc_clock_init+0xc2>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6013      	str	r3, [r2, #0]

		/* HCLK = SYSCLK */
		RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	6093      	str	r3, [r2, #8]

		/* PCLK2 = HCLK */
		RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bb0:	4a0f      	ldr	r2, [pc, #60]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	6093      	str	r3, [r2, #8]

		/* PCLK1 = HCLK */
		RCC->CFGR |= RCC_CFGR_PPRE1_DIV1;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	6093      	str	r3, [r2, #8]

		/* Select HSE as system clock source */
		RCC->CFGR &= ~RCC_CFGR_SW;
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bc4:	f023 0303 	bic.w	r3, r3, #3
 8000bc8:	6093      	str	r3, [r2, #8]
		RCC->CFGR |= RCC_CFGR_SW_HSE;
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6093      	str	r3, [r2, #8]

		/* Wait till HSE is used as system clock source */
		while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE) {
 8000bd6:	bf00      	nop
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <rcc_clock_init+0xbe>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d1f9      	bne.n	8000bd8 <rcc_clock_init+0xa6>
		}
	} else {
		/* If HSE fails to start-up, the application will have wrong clock
		configuration. User can add here some code to deal with this error */
	}
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40023c00 	.word	0x40023c00
 8000bf8:	7552203a 	.word	0x7552203a
 8000bfc:	6e696e6e 	.word	0x6e696e6e
 8000c00:	2e2e2e67 	.word	0x2e2e2e67
 8000c04:	00000a0d 	.word	0x00000a0d
 8000c08:	6b736154 	.word	0x6b736154
 8000c0c:	00000031 	.word	0x00000031
 8000c10:	6b736154 	.word	0x6b736154
 8000c14:	00000032 	.word	0x00000032
 8000c18:	6b736154 	.word	0x6b736154
 8000c1c:	00000033 	.word	0x00000033
 8000c20:	65726854 	.word	0x65726854
 8000c24:	31206461 	.word	0x31206461
 8000c28:	65726320 	.word	0x65726320
 8000c2c:	6f697461 	.word	0x6f697461
 8000c30:	6166206e 	.word	0x6166206e
 8000c34:	64656c69 	.word	0x64656c69
 8000c38:	00000a0d 	.word	0x00000a0d
 8000c3c:	65726854 	.word	0x65726854
 8000c40:	32206461 	.word	0x32206461
 8000c44:	65726320 	.word	0x65726320
 8000c48:	6f697461 	.word	0x6f697461
 8000c4c:	6166206e 	.word	0x6166206e
 8000c50:	64656c69 	.word	0x64656c69
 8000c54:	00000a0d 	.word	0x00000a0d
 8000c58:	65726854 	.word	0x65726854
 8000c5c:	33206461 	.word	0x33206461
 8000c60:	65726320 	.word	0x65726320
 8000c64:	6f697461 	.word	0x6f697461
 8000c68:	6166206e 	.word	0x6166206e
 8000c6c:	64656c69 	.word	0x64656c69
 8000c70:	00000a0d 	.word	0x00000a0d
 8000c74:	52415355 	.word	0x52415355
 8000c78:	6e692054 	.word	0x6e692054
 8000c7c:	61697469 	.word	0x61697469
 8000c80:	657a696c 	.word	0x657a696c
 8000c84:	0a0d2164 	.word	0x0a0d2164
	...

08000c89 <_eromdev>:
 8000c89:	00          	.byte	0x00
	...
